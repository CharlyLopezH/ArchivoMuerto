// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using ArchivoMuertoAPI;

#nullable disable

namespace ArchivoMuertoAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220131163359_Cajas")]
    partial class Cajas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Biografia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Actores");
                });

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.Cine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Point>("Ubicacion")
                        .HasColumnType("geography");

                    b.HasKey("Id");

                    b.ToTable("Cines");
                });

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.Caja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("EnCines")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaLanzamiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resumen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Trailer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Caja");
                });

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.CajasActores", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("CajaId")
                        .HasColumnType("int");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("Personaje")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ActorId", "CajaId");

                    b.HasIndex("CajaId");

                    b.ToTable("CajasActores");
                });

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.CajasCines", b =>
                {
                    b.Property<int>("CajaId")
                        .HasColumnType("int");

                    b.Property<int>("CineId")
                        .HasColumnType("int");

                    b.HasKey("CajaId", "CineId");

                    b.HasIndex("CineId");

                    b.ToTable("CajasCines");
                });

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.CajasGeneros", b =>
                {
                    b.Property<int>("CajaId")
                        .HasColumnType("int");

                    b.Property<int>("GeneroId")
                        .HasColumnType("int");

                    b.HasKey("CajaId", "GeneroId");

                    b.HasIndex("GeneroId");

                    b.ToTable("CajasGeneros");
                });

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.CajasActores", b =>
                {
                    b.HasOne("ArchivoMuertoAPI.Entidades.Actor", "Actor")
                        .WithMany("CajasActores")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArchivoMuertoAPI.Entidades.Caja", "Caja")
                        .WithMany("CajasActores")
                        .HasForeignKey("CajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Caja");
                });

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.CajasCines", b =>
                {
                    b.HasOne("ArchivoMuertoAPI.Entidades.Cine", "Cine")
                        .WithMany("CajasCines")
                        .HasForeignKey("CineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArchivoMuertoAPI.Entidades.Caja", "Caja")
                        .WithMany("CajasCines")
                        .HasForeignKey("CajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cine");

                    b.Navigation("Caja");
                });

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.CajasGeneros", b =>
                {
                    b.HasOne("ArchivoMuertoAPI.Entidades.Genero", "Genero")
                        .WithMany("CajasGeneros")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArchivoMuertoAPI.Entidades.Caja", "Caja")
                        .WithMany("CajasGeneros")
                        .HasForeignKey("CajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genero");

                    b.Navigation("Caja");
                });

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.Actor", b =>
                {
                    b.Navigation("CajasActores");
                });

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.Cine", b =>
                {
                    b.Navigation("CajasCines");
                });

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.Genero", b =>
                {
                    b.Navigation("CajasGeneros");
                });

            modelBuilder.Entity("ArchivoMuertoAPI.Entidades.Caja", b =>
                {
                    b.Navigation("CajasActores");

                    b.Navigation("CajasCines");

                    b.Navigation("CajasGeneros");
                });
#pragma warning restore 612, 618
        }
    }
}
