{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {Construct} */\n\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(types.codeIndented);\n    return factorySpace(effects, afterStartPrefix, types.linePrefix, constants.tabSize + 1)(code);\n  }\n  /** @type {State} */\n\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize ? afterPrefix(code) : nok(code);\n  }\n  /** @type {State} */\n\n\n  function afterPrefix(code) {\n    if (code === codes.eof) {\n      return after(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code);\n    }\n\n    effects.enter(types.codeFlowValue);\n    return content(code);\n  }\n  /** @type {State} */\n\n\n  function content(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFlowValue);\n      return afterPrefix(code);\n    }\n\n    effects.consume(code);\n    return content;\n  }\n  /** @type {State} */\n\n\n  function after(code) {\n    effects.exit(types.codeIndented);\n    return ok(code);\n  }\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return start;\n    }\n\n    return factorySpace(effects, afterPrefix, types.linePrefix, constants.tabSize + 1)(code);\n  }\n  /** @type {State} */\n\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize ? ok(code) : markdownLineEnding(code) ? start(code) : nok(code);\n  }\n}","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/micromark-core-commonmark/dev/lib/code-indented.js"],"names":["factorySpace","markdownLineEnding","codes","constants","types","codeIndented","name","tokenize","tokenizeCodeIndented","indentedContent","tokenizeIndentedContent","partial","effects","ok","nok","self","start","code","enter","afterStartPrefix","linePrefix","tabSize","tail","events","length","type","sliceSerialize","afterPrefix","eof","after","attempt","codeFlowValue","content","exit","consume","parser","lazy","now","line","lineEnding"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst indentedContent = {tokenize: tokenizeIndentedContent, partial: true}\n\n/** @type {Tokenizer} */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(types.codeIndented)\n    return factorySpace(\n      effects,\n      afterStartPrefix,\n      types.linePrefix,\n      constants.tabSize + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n      ? afterPrefix(code)\n      : nok(code)\n  }\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    if (code === codes.eof) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter(types.codeFlowValue)\n    return content(code)\n  }\n\n  /** @type {State} */\n  function content(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFlowValue)\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(types.codeIndented)\n    return ok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return start\n    }\n\n    return factorySpace(\n      effects,\n      afterPrefix,\n      types.linePrefix,\n      constants.tabSize + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}