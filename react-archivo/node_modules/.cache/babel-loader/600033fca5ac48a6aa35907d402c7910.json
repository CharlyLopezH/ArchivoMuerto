{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { ok as assert } from 'uvu/assert';\nimport { decodeEntity } from 'parse-entities/decode-entity.js';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {Construct} */\n\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n\n  let max;\n  /** @type {(code: Code) => code is number} */\n\n  let test;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(code === codes.ampersand, 'expected `&`');\n    effects.enter(types.characterReference);\n    effects.enter(types.characterReferenceMarker);\n    effects.consume(code);\n    effects.exit(types.characterReferenceMarker);\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (code === codes.numberSign) {\n      effects.enter(types.characterReferenceMarkerNumeric);\n      effects.consume(code);\n      effects.exit(types.characterReferenceMarkerNumeric);\n      return numeric;\n    }\n\n    effects.enter(types.characterReferenceValue);\n    max = constants.characterReferenceNamedSizeMax;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n  /** @type {State} */\n\n\n  function numeric(code) {\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter(types.characterReferenceMarkerHexadecimal);\n      effects.consume(code);\n      effects.exit(types.characterReferenceMarkerHexadecimal);\n      effects.enter(types.characterReferenceValue);\n      max = constants.characterReferenceHexadecimalSizeMax;\n      test = asciiHexDigit;\n      return value;\n    }\n\n    effects.enter(types.characterReferenceValue);\n    max = constants.characterReferenceDecimalSizeMax;\n    test = asciiDigit;\n    return value(code);\n  }\n  /** @type {State} */\n\n\n  function value(code) {\n    /** @type {Token} */\n    let token;\n\n    if (code === codes.semicolon && size) {\n      token = effects.exit(types.characterReferenceValue);\n\n      if (test === asciiAlphanumeric && !decodeEntity(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      effects.enter(types.characterReferenceMarker);\n      effects.consume(code);\n      effects.exit(types.characterReferenceMarker);\n      effects.exit(types.characterReference);\n      return ok;\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n\n    return nok(code);\n  }\n}","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/micromark-core-commonmark/dev/lib/character-reference.js"],"names":["ok","assert","decodeEntity","asciiAlphanumeric","asciiDigit","asciiHexDigit","codes","constants","types","characterReference","name","tokenize","tokenizeCharacterReference","effects","nok","self","size","max","test","start","code","ampersand","enter","characterReferenceMarker","consume","exit","open","numberSign","characterReferenceMarkerNumeric","numeric","characterReferenceValue","characterReferenceNamedSizeMax","value","uppercaseX","lowercaseX","characterReferenceMarkerHexadecimal","characterReferenceHexadecimalSizeMax","characterReferenceDecimalSizeMax","token","semicolon","sliceSerialize"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {decodeEntity} from 'parse-entities/decode-entity.js'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => code is number} */\n  let test\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.ampersand, 'expected `&`')\n    effects.enter(types.characterReference)\n    effects.enter(types.characterReferenceMarker)\n    effects.consume(code)\n    effects.exit(types.characterReferenceMarker)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (code === codes.numberSign) {\n      effects.enter(types.characterReferenceMarkerNumeric)\n      effects.consume(code)\n      effects.exit(types.characterReferenceMarkerNumeric)\n      return numeric\n    }\n\n    effects.enter(types.characterReferenceValue)\n    max = constants.characterReferenceNamedSizeMax\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /** @type {State} */\n  function numeric(code) {\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter(types.characterReferenceMarkerHexadecimal)\n      effects.consume(code)\n      effects.exit(types.characterReferenceMarkerHexadecimal)\n      effects.enter(types.characterReferenceValue)\n      max = constants.characterReferenceHexadecimalSizeMax\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter(types.characterReferenceValue)\n    max = constants.characterReferenceDecimalSizeMax\n    test = asciiDigit\n    return value(code)\n  }\n\n  /** @type {State} */\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === codes.semicolon && size) {\n      token = effects.exit(types.characterReferenceValue)\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeEntity(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter(types.characterReferenceMarker)\n      effects.consume(code)\n      effects.exit(types.characterReferenceMarker)\n      effects.exit(types.characterReference)\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}