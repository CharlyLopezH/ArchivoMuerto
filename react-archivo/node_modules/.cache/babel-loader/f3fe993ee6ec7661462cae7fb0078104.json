{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport { ok as assert } from 'uvu/assert';\nimport createDebug from 'debug';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { values } from 'micromark-util-symbol/values.js';\nconst debug = createDebug('micromark');\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\n\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(from ? Object.assign({}, from) : {\n    line: 1,\n    column: 1,\n    offset: 0\n  }, {\n    _index: 0,\n    _bufferIndex: -1\n  });\n  /** @type {Record<string, number>} */\n\n  const columnStart = {};\n  /** @type {Construct[]} */\n\n  const resolveAllConstructs = [];\n  /** @type {Chunk[]} */\n\n  let chunks = [];\n  /** @type {Token[]} */\n\n  let stack = [];\n  /** @type {boolean|undefined} */\n\n  let consumed = true;\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: codes.eof,\n    code: codes.eof,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  };\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects);\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode;\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n\n  return context;\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main(); // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== codes.eof) {\n      return [];\n    }\n\n    addResult(initialize, 0); // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n  /** @type {TokenizeContext['now']} */\n\n\n  function now() {\n    return Object.assign({}, point);\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n    debug('position: define skip: `%j`', point);\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]; // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n\n  function go(code) {\n    assert(consumed === true, 'expected character to be consumed');\n    consumed = undefined;\n    debug('main: passing `%s` to %s', code, state && state.name);\n    expectedCode = code;\n    assert(typeof state === 'function', 'expected state');\n    state = state(code);\n  }\n  /** @type {Effects['consume']} */\n\n\n  function consume(code) {\n    assert(code === expectedCode, 'expected given code to equal expected code');\n    debug('consume: `%s`', code);\n    assert(consumed === undefined, 'expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used');\n    assert(code === null ? context.events.length === 0 || context.events[context.events.length - 1][0] === 'exit' : context.events[context.events.length - 1][0] === 'enter', 'expected last token to be open');\n\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === codes.carriageReturnLineFeed ? 2 : 1;\n      accountForPotentialSkip();\n      debug('position: after eol: `%j`', point);\n    } else if (code !== codes.virtualSpace) {\n      point.column++;\n      point.offset++;\n    } // Not in a string chunk.\n\n\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++; // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    } // Expose the previous character.\n\n\n    context.previous = code; // Mark as consumed.\n\n    consumed = true;\n  }\n  /** @type {Effects['enter']} */\n\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    assert(typeof type === 'string', 'expected string type');\n    assert(type.length > 0, 'expected non-empty string');\n    debug('enter: `%s`', type);\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n  /** @type {Effects['exit']} */\n\n\n  function exit(type) {\n    assert(typeof type === 'string', 'expected string type');\n    assert(type.length > 0, 'expected non-empty string');\n    const token = stack.pop();\n    assert(token, 'cannot close w/o open tokens');\n    token.end = now();\n    assert(type === token.type, 'expected exit token to match current token');\n    assert(!(token.start._index === token.end._index && token.start._bufferIndex === token.end._bufferIndex), 'expected non-empty token (`' + type + '`)');\n    debug('exit: `%s`', token.type);\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n\n  function constructFactory(onreturn, fields) {\n    return hook;\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Construct[]|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Construct[]} */\n      let listOfConstructs;\n      /** @type {number} */\n\n      let constructIndex;\n      /** @type {Construct} */\n\n      let currentConstruct;\n      /** @type {Info} */\n\n      let info;\n      return Array.isArray(constructs) ?\n      /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ? // @ts-expect-error Looks like a construct.\n      handleListOfConstructs([constructs]) : handleMapOfConstructs(constructs);\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start;\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [// To do: add more extension tests.\n\n          /* c8 ignore next 2 */\n          ...(Array.isArray(def) ? def : def ? [def] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Construct[]} list\n       * @returns {State}\n       */\n\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n\n        if (list.length === 0) {\n          assert(bogusState, 'expected `bogusState` to be given');\n          return bogusState;\n        }\n\n        return handleConstruct(list[constructIndex]);\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n\n      function handleConstruct(construct) {\n        return start;\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n\n          return construct.tokenize.call( // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n      /** @type {State} */\n\n\n      function ok(code) {\n        assert(code === expectedCode, 'expected code');\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n      /** @type {State} */\n\n\n      function nok(code) {\n        assert(code === expectedCode, 'expected code');\n        consumed = true;\n        info.restore();\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n\n        return bogusState;\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n\n    assert(construct.partial || context.events.length === 0 || context.events[context.events.length - 1][0] === 'exit', 'expected last token to end');\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      restore,\n      from: startEventsIndex\n    };\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n      debug('position: restore: `%j`', point);\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Chunk[]} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Chunk[]}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Chunk[]} */\n\n  let view;\n\n  if (startIndex === endIndex) {\n    assert(endBufferIndex > -1, 'expected non-negative end buffer index');\n    assert(startBufferIndex > -1, 'expected non-negative start buffer index'); // @ts-expect-error `_bufferIndex` is used on string chunks.\n\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex);\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n\n  return view;\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Chunk[]} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {string[]} */\n\n  const result = [];\n  /** @type {boolean|undefined} */\n\n  let atTab;\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n\n    let value;\n\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case codes.carriageReturn:\n        {\n          value = values.cr;\n          break;\n        }\n\n      case codes.lineFeed:\n        {\n          value = values.lf;\n          break;\n        }\n\n      case codes.carriageReturnLineFeed:\n        {\n          value = values.cr + values.lf;\n          break;\n        }\n\n      case codes.horizontalTab:\n        {\n          value = expandTabs ? values.space : values.ht;\n          break;\n        }\n\n      case codes.virtualSpace:\n        {\n          if (!expandTabs && atTab) continue;\n          value = values.space;\n          break;\n        }\n\n      default:\n        {\n          assert(typeof chunk === 'number', 'expected number'); // Currently only replacement character.\n\n          value = String.fromCharCode(chunk);\n        }\n    }\n\n    atTab = chunk === codes.horizontalTab;\n    result.push(value);\n  }\n\n  return result.join('');\n}","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/micromark/dev/lib/create-tokenizer.js"],"names":["ok","assert","createDebug","markdownLineEnding","push","splice","resolveAll","codes","values","debug","createTokenizer","parser","initialize","from","point","Object","assign","line","column","offset","_index","_bufferIndex","columnStart","resolveAllConstructs","chunks","stack","consumed","effects","consume","enter","exit","attempt","constructFactory","onsuccessfulconstruct","check","onsuccessfulcheck","interrupt","context","previous","eof","code","containerState","events","sliceStream","sliceSerialize","now","defineSkip","write","state","tokenize","call","expectedCode","slice","main","length","addResult","token","expandTabs","serializeChunks","sliceChunks","value","accountForPotentialSkip","chunkIndex","chunk","go","charCodeAt","undefined","name","carriageReturnLineFeed","virtualSpace","type","fields","start","pop","end","construct","info","_","restore","onreturn","hook","constructs","returnState","bogusState","listOfConstructs","constructIndex","currentConstruct","Array","isArray","handleListOfConstructs","handleMapOfConstructs","map","def","all","null","list","handleConstruct","store","partial","disable","includes","nok","create","resolve","resolveTo","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","startIndex","startBufferIndex","endIndex","endBufferIndex","view","index","result","atTab","carriageReturn","cr","lineFeed","lf","horizontalTab","space","ht","String","fromCharCode","join"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport createDebug from 'debug'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {values} from 'micromark-util-symbol/values.js'\n\nconst debug = createDebug('micromark')\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from ? Object.assign({}, from) : {line: 1, column: 1, offset: 0},\n    {_index: 0, _bufferIndex: -1}\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Construct[]} */\n  const resolveAllConstructs = []\n  /** @type {Chunk[]} */\n  let chunks = []\n  /** @type {Token[]} */\n  let stack = []\n  /** @type {boolean|undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {interrupt: true})\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: codes.eof,\n    code: codes.eof,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== codes.eof) {\n      return []\n    }\n\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    return Object.assign({}, point)\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n    debug('position: define skip: `%j`', point)\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    assert(consumed === true, 'expected character to be consumed')\n    consumed = undefined\n    debug('main: passing `%s` to %s', code, state && state.name)\n    expectedCode = code\n    assert(typeof state === 'function', 'expected state')\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    assert(code === expectedCode, 'expected given code to equal expected code')\n\n    debug('consume: `%s`', code)\n\n    assert(\n      consumed === undefined,\n      'expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used'\n    )\n    assert(\n      code === null\n        ? context.events.length === 0 ||\n            context.events[context.events.length - 1][0] === 'exit'\n        : context.events[context.events.length - 1][0] === 'enter',\n      'expected last token to be open'\n    )\n\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === codes.carriageReturnLineFeed ? 2 : 1\n      accountForPotentialSkip()\n      debug('position: after eol: `%j`', point)\n    } else if (code !== codes.virtualSpace) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n\n    assert(typeof type === 'string', 'expected string type')\n    assert(type.length > 0, 'expected non-empty string')\n    debug('enter: `%s`', type)\n\n    context.events.push(['enter', token, context])\n\n    stack.push(token)\n\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    assert(typeof type === 'string', 'expected string type')\n    assert(type.length > 0, 'expected non-empty string')\n\n    const token = stack.pop()\n    assert(token, 'cannot close w/o open tokens')\n    token.end = now()\n\n    assert(type === token.type, 'expected exit token to match current token')\n\n    assert(\n      !(\n        token.start._index === token.end._index &&\n        token.start._bufferIndex === token.end._bufferIndex\n      ),\n      'expected non-empty token (`' + type + '`)'\n    )\n\n    debug('exit: `%s`', token.type)\n    context.events.push(['exit', token, context])\n\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Construct[]|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Construct[]} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Construct[]} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          assert(bogusState, 'expected `bogusState` to be given')\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        assert(code === expectedCode, 'expected code')\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        assert(code === expectedCode, 'expected code')\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n\n    assert(\n      construct.partial ||\n        context.events.length === 0 ||\n        context.events[context.events.length - 1][0] === 'exit',\n      'expected last token to end'\n    )\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n\n    return {restore, from: startEventsIndex}\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n      debug('position: restore: `%j`', point)\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Chunk[]} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Chunk[]}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Chunk[]} */\n  let view\n\n  if (startIndex === endIndex) {\n    assert(endBufferIndex > -1, 'expected non-negative end buffer index')\n    assert(startBufferIndex > -1, 'expected non-negative start buffer index')\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Chunk[]} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {string[]} */\n  const result = []\n  /** @type {boolean|undefined} */\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case codes.carriageReturn: {\n          value = values.cr\n\n          break\n        }\n\n        case codes.lineFeed: {\n          value = values.lf\n\n          break\n        }\n\n        case codes.carriageReturnLineFeed: {\n          value = values.cr + values.lf\n\n          break\n        }\n\n        case codes.horizontalTab: {\n          value = expandTabs ? values.space : values.ht\n\n          break\n        }\n\n        case codes.virtualSpace: {\n          if (!expandTabs && atTab) continue\n          value = values.space\n\n          break\n        }\n\n        default: {\n          assert(typeof chunk === 'number', 'expected number')\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === codes.horizontalTab\n    result.push(value)\n  }\n\n  return result.join('')\n}\n"]},"metadata":{},"sourceType":"module"}