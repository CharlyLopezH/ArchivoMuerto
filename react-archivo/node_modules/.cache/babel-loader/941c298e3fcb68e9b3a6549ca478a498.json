{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {Construct} */\n\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected eol');\n    effects.enter(types.lineEnding);\n    effects.consume(code);\n    effects.exit(types.lineEnding);\n    return factorySpace(effects, ok, types.linePrefix);\n  }\n}","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/micromark-core-commonmark/dev/lib/line-ending.js"],"names":["ok","assert","factorySpace","markdownLineEnding","types","lineEnding","name","tokenize","tokenizeLineEnding","effects","start","code","enter","consume","exit","linePrefix"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAAQA,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,QAAiC,0BAAjC;AACA,SAAQC,KAAR,QAAoB,gCAApB;AAEA;;AACA,OAAO,MAAMC,UAAU,GAAG;AAACC,EAAAA,IAAI,EAAE,YAAP;AAAqBC,EAAAA,QAAQ,EAAEC;AAA/B,CAAnB;AAEP;;AACA,SAASA,kBAAT,CAA4BC,OAA5B,EAAqCT,EAArC,EAAyC;AACvC,SAAOU,KAAP;AAEA;;AACA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnBV,IAAAA,MAAM,CAACE,kBAAkB,CAACQ,IAAD,CAAnB,EAA2B,cAA3B,CAAN;AACAF,IAAAA,OAAO,CAACG,KAAR,CAAcR,KAAK,CAACC,UAApB;AACAI,IAAAA,OAAO,CAACI,OAAR,CAAgBF,IAAhB;AACAF,IAAAA,OAAO,CAACK,IAAR,CAAaV,KAAK,CAACC,UAAnB;AACA,WAAOH,YAAY,CAACO,OAAD,EAAUT,EAAV,EAAcI,KAAK,CAACW,UAApB,CAAnB;AACD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const lineEnding = {name: 'lineEnding', tokenize: tokenizeLineEnding}\n\n/** @type {Tokenizer} */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(effects, ok, types.linePrefix)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}