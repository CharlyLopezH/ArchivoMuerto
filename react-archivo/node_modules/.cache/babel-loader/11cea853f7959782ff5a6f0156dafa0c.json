{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n} // @ts-ignore\n\n\nimport cloneDeep from 'nanoclone';\nimport { mixed as locale } from './locale';\nimport Condition from './Condition';\nimport runTests from './util/runTests';\nimport createValidation from './util/createValidation';\nimport printValue from './util/printValue';\nimport Ref from './Reference';\nimport { getIn } from './util/reach';\nimport toArray from './util/toArray';\nimport ValidationError from './ValidationError';\nimport ReferenceSet from './util/ReferenceSet';\nexport default class BaseSchema {\n  constructor(options) {\n    this.deps = [];\n    this.conditions = [];\n    this._whitelist = new ReferenceSet();\n    this._blacklist = new ReferenceSet();\n    this.exclusiveTests = Object.create(null);\n    this.tests = [];\n    this.transforms = [];\n    this.withMutation(() => {\n      this.typeError(locale.notType);\n    });\n    this.type = (options == null ? void 0 : options.type) || 'mixed';\n    this.spec = _extends({\n      strip: false,\n      strict: false,\n      abortEarly: true,\n      recursive: true,\n      nullable: false,\n      presence: 'optional'\n    }, options == null ? void 0 : options.spec);\n  } // TODO: remove\n\n\n  get _type() {\n    return this.type;\n  }\n\n  _typeCheck(_value) {\n    return true;\n  }\n\n  clone(spec) {\n    if (this._mutate) {\n      if (spec) Object.assign(this.spec, spec);\n      return this;\n    } // if the nested value is a schema we can skip cloning, since\n    // they are already immutable\n\n\n    const next = Object.create(Object.getPrototypeOf(this)); // @ts-expect-error this is readonly\n\n    next.type = this.type;\n    next._typeError = this._typeError;\n    next._whitelistError = this._whitelistError;\n    next._blacklistError = this._blacklistError;\n    next._whitelist = this._whitelist.clone();\n    next._blacklist = this._blacklist.clone();\n    next.exclusiveTests = _extends({}, this.exclusiveTests); // @ts-expect-error this is readonly\n\n    next.deps = [...this.deps];\n    next.conditions = [...this.conditions];\n    next.tests = [...this.tests];\n    next.transforms = [...this.transforms];\n    next.spec = cloneDeep(_extends({}, this.spec, spec));\n    return next;\n  }\n\n  label(label) {\n    var next = this.clone();\n    next.spec.label = label;\n    return next;\n  }\n\n  meta() {\n    if (arguments.length === 0) return this.spec.meta;\n    let next = this.clone();\n    next.spec.meta = Object.assign(next.spec.meta || {}, arguments.length <= 0 ? undefined : arguments[0]);\n    return next;\n  } // withContext<TContext extends AnyObject>(): BaseSchema<\n  //   TCast,\n  //   TContext,\n  //   TOutput\n  // > {\n  //   return this as any;\n  // }\n\n\n  withMutation(fn) {\n    let before = this._mutate;\n    this._mutate = true;\n    let result = fn(this);\n    this._mutate = before;\n    return result;\n  }\n\n  concat(schema) {\n    if (!schema || schema === this) return this;\n    if (schema.type !== this.type && this.type !== 'mixed') throw new TypeError(`You cannot \\`concat()\\` schema's of different types: ${this.type} and ${schema.type}`);\n    let base = this;\n    let combined = schema.clone();\n\n    const mergedSpec = _extends({}, base.spec, combined.spec); // if (combined.spec.nullable === UNSET)\n    //   mergedSpec.nullable = base.spec.nullable;\n    // if (combined.spec.presence === UNSET)\n    //   mergedSpec.presence = base.spec.presence;\n\n\n    combined.spec = mergedSpec;\n    combined._typeError || (combined._typeError = base._typeError);\n    combined._whitelistError || (combined._whitelistError = base._whitelistError);\n    combined._blacklistError || (combined._blacklistError = base._blacklistError); // manually merge the blacklist/whitelist (the other `schema` takes\n    // precedence in case of conflicts)\n\n    combined._whitelist = base._whitelist.merge(schema._whitelist, schema._blacklist);\n    combined._blacklist = base._blacklist.merge(schema._blacklist, schema._whitelist); // start with the current tests\n\n    combined.tests = base.tests;\n    combined.exclusiveTests = base.exclusiveTests; // manually add the new tests to ensure\n    // the deduping logic is consistent\n\n    combined.withMutation(next => {\n      schema.tests.forEach(fn => {\n        next.test(fn.OPTIONS);\n      });\n    });\n    return combined;\n  }\n\n  isType(v) {\n    if (this.spec.nullable && v === null) return true;\n    return this._typeCheck(v);\n  }\n\n  resolve(options) {\n    let schema = this;\n\n    if (schema.conditions.length) {\n      let conditions = schema.conditions;\n      schema = schema.clone();\n      schema.conditions = [];\n      schema = conditions.reduce((schema, condition) => condition.resolve(schema, options), schema);\n      schema = schema.resolve(options);\n    }\n\n    return schema;\n  }\n  /**\n   *\n   * @param {*} value\n   * @param {Object} options\n   * @param {*=} options.parent\n   * @param {*=} options.context\n   */\n\n\n  cast(value) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let resolvedSchema = this.resolve(_extends({\n      value\n    }, options));\n\n    let result = resolvedSchema._cast(value, options);\n\n    if (value !== undefined && options.assert !== false && resolvedSchema.isType(result) !== true) {\n      let formattedValue = printValue(value);\n      let formattedResult = printValue(result);\n      throw new TypeError(`The value of ${options.path || 'field'} could not be cast to a value ` + `that satisfies the schema type: \"${resolvedSchema._type}\". \\n\\n` + `attempted value: ${formattedValue} \\n` + (formattedResult !== formattedValue ? `result of cast: ${formattedResult}` : ''));\n    }\n\n    return result;\n  }\n\n  _cast(rawValue, _options) {\n    let value = rawValue === undefined ? rawValue : this.transforms.reduce((value, fn) => fn.call(this, value, rawValue, this), rawValue);\n\n    if (value === undefined) {\n      value = this.getDefault();\n    }\n\n    return value;\n  }\n\n  _validate(_value) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let cb = arguments.length > 2 ? arguments[2] : undefined;\n    let {\n      sync,\n      path,\n      from = [],\n      originalValue = _value,\n      strict = this.spec.strict,\n      abortEarly = this.spec.abortEarly\n    } = options;\n    let value = _value;\n\n    if (!strict) {\n      // this._validating = true;\n      value = this._cast(value, _extends({\n        assert: false\n      }, options)); // this._validating = false;\n    } // value is cast, we can check if it meets type requirements\n\n\n    let args = {\n      value,\n      path,\n      options,\n      originalValue,\n      schema: this,\n      label: this.spec.label,\n      sync,\n      from\n    };\n    let initialTests = [];\n    if (this._typeError) initialTests.push(this._typeError);\n    if (this._whitelistError) initialTests.push(this._whitelistError);\n    if (this._blacklistError) initialTests.push(this._blacklistError);\n    runTests({\n      args,\n      value,\n      path,\n      sync,\n      tests: initialTests,\n      endEarly: abortEarly\n    }, err => {\n      if (err) return void cb(err, value);\n      runTests({\n        tests: this.tests,\n        args,\n        path,\n        sync,\n        value,\n        endEarly: abortEarly\n      }, cb);\n    });\n  }\n\n  validate(value, options, maybeCb) {\n    let schema = this.resolve(_extends({}, options, {\n      value\n    })); // callback case is for nested validations\n\n    return typeof maybeCb === 'function' ? schema._validate(value, options, maybeCb) : new Promise((resolve, reject) => schema._validate(value, options, (err, value) => {\n      if (err) reject(err);else resolve(value);\n    }));\n  }\n\n  validateSync(value, options) {\n    let schema = this.resolve(_extends({}, options, {\n      value\n    }));\n    let result;\n\n    schema._validate(value, _extends({}, options, {\n      sync: true\n    }), (err, value) => {\n      if (err) throw err;\n      result = value;\n    });\n\n    return result;\n  }\n\n  isValid(value, options) {\n    return this.validate(value, options).then(() => true, err => {\n      if (ValidationError.isError(err)) return false;\n      throw err;\n    });\n  }\n\n  isValidSync(value, options) {\n    try {\n      this.validateSync(value, options);\n      return true;\n    } catch (err) {\n      if (ValidationError.isError(err)) return false;\n      throw err;\n    }\n  }\n\n  _getDefault() {\n    let defaultValue = this.spec.default;\n\n    if (defaultValue == null) {\n      return defaultValue;\n    }\n\n    return typeof defaultValue === 'function' ? defaultValue.call(this) : cloneDeep(defaultValue);\n  }\n\n  getDefault(options) {\n    let schema = this.resolve(options || {});\n    return schema._getDefault();\n  }\n\n  default(def) {\n    if (arguments.length === 0) {\n      return this._getDefault();\n    }\n\n    let next = this.clone({\n      default: def\n    });\n    return next;\n  }\n\n  strict() {\n    let isStrict = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var next = this.clone();\n    next.spec.strict = isStrict;\n    return next;\n  }\n\n  _isPresent(value) {\n    return value != null;\n  }\n\n  defined() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : locale.defined;\n    return this.test({\n      message,\n      name: 'defined',\n      exclusive: true,\n\n      test(value) {\n        return value !== undefined;\n      }\n\n    });\n  }\n\n  required() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : locale.required;\n    return this.clone({\n      presence: 'required'\n    }).withMutation(s => s.test({\n      message,\n      name: 'required',\n      exclusive: true,\n\n      test(value) {\n        return this.schema._isPresent(value);\n      }\n\n    }));\n  }\n\n  notRequired() {\n    var next = this.clone({\n      presence: 'optional'\n    });\n    next.tests = next.tests.filter(test => test.OPTIONS.name !== 'required');\n    return next;\n  }\n\n  nullable() {\n    let isNullable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var next = this.clone({\n      nullable: isNullable !== false\n    });\n    return next;\n  }\n\n  transform(fn) {\n    var next = this.clone();\n    next.transforms.push(fn);\n    return next;\n  }\n  /**\n   * Adds a test function to the schema's queue of tests.\n   * tests can be exclusive or non-exclusive.\n   *\n   * - exclusive tests, will replace any existing tests of the same name.\n   * - non-exclusive: can be stacked\n   *\n   * If a non-exclusive test is added to a schema with an exclusive test of the same name\n   * the exclusive test is removed and further tests of the same name will be stacked.\n   *\n   * If an exclusive test is added to a schema with non-exclusive tests of the same name\n   * the previous tests are removed and further tests of the same name will replace each other.\n   */\n\n\n  test() {\n    let opts;\n\n    if (arguments.length === 1) {\n      if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'function') {\n        opts = {\n          test: arguments.length <= 0 ? undefined : arguments[0]\n        };\n      } else {\n        opts = arguments.length <= 0 ? undefined : arguments[0];\n      }\n    } else if (arguments.length === 2) {\n      opts = {\n        name: arguments.length <= 0 ? undefined : arguments[0],\n        test: arguments.length <= 1 ? undefined : arguments[1]\n      };\n    } else {\n      opts = {\n        name: arguments.length <= 0 ? undefined : arguments[0],\n        message: arguments.length <= 1 ? undefined : arguments[1],\n        test: arguments.length <= 2 ? undefined : arguments[2]\n      };\n    }\n\n    if (opts.message === undefined) opts.message = locale.default;\n    if (typeof opts.test !== 'function') throw new TypeError('`test` is a required parameters');\n    let next = this.clone();\n    let validate = createValidation(opts);\n    let isExclusive = opts.exclusive || opts.name && next.exclusiveTests[opts.name] === true;\n\n    if (opts.exclusive) {\n      if (!opts.name) throw new TypeError('Exclusive tests must provide a unique `name` identifying the test');\n    }\n\n    if (opts.name) next.exclusiveTests[opts.name] = !!opts.exclusive;\n    next.tests = next.tests.filter(fn => {\n      if (fn.OPTIONS.name === opts.name) {\n        if (isExclusive) return false;\n        if (fn.OPTIONS.test === validate.OPTIONS.test) return false;\n      }\n\n      return true;\n    });\n    next.tests.push(validate);\n    return next;\n  }\n\n  when(keys, options) {\n    if (!Array.isArray(keys) && typeof keys !== 'string') {\n      options = keys;\n      keys = '.';\n    }\n\n    let next = this.clone();\n    let deps = toArray(keys).map(key => new Ref(key));\n    deps.forEach(dep => {\n      // @ts-ignore\n      if (dep.isSibling) next.deps.push(dep.key);\n    });\n    next.conditions.push(new Condition(deps, options));\n    return next;\n  }\n\n  typeError(message) {\n    var next = this.clone();\n    next._typeError = createValidation({\n      message,\n      name: 'typeError',\n\n      test(value) {\n        if (value !== undefined && !this.schema.isType(value)) return this.createError({\n          params: {\n            type: this.schema._type\n          }\n        });\n        return true;\n      }\n\n    });\n    return next;\n  }\n\n  oneOf(enums) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.oneOf;\n    var next = this.clone();\n    enums.forEach(val => {\n      next._whitelist.add(val);\n\n      next._blacklist.delete(val);\n    });\n    next._whitelistError = createValidation({\n      message,\n      name: 'oneOf',\n\n      test(value) {\n        if (value === undefined) return true;\n        let valids = this.schema._whitelist;\n        return valids.has(value, this.resolve) ? true : this.createError({\n          params: {\n            values: valids.toArray().join(', ')\n          }\n        });\n      }\n\n    });\n    return next;\n  }\n\n  notOneOf(enums) {\n    let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.notOneOf;\n    var next = this.clone();\n    enums.forEach(val => {\n      next._blacklist.add(val);\n\n      next._whitelist.delete(val);\n    });\n    next._blacklistError = createValidation({\n      message,\n      name: 'notOneOf',\n\n      test(value) {\n        let invalids = this.schema._blacklist;\n        if (invalids.has(value, this.resolve)) return this.createError({\n          params: {\n            values: invalids.toArray().join(', ')\n          }\n        });\n        return true;\n      }\n\n    });\n    return next;\n  }\n\n  strip() {\n    let strip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let next = this.clone();\n    next.spec.strip = strip;\n    return next;\n  }\n\n  describe() {\n    const next = this.clone();\n    const {\n      label,\n      meta\n    } = next.spec;\n    const description = {\n      meta,\n      label,\n      type: next.type,\n      oneOf: next._whitelist.describe(),\n      notOneOf: next._blacklist.describe(),\n      tests: next.tests.map(fn => ({\n        name: fn.OPTIONS.name,\n        params: fn.OPTIONS.params\n      })).filter((n, idx, list) => list.findIndex(c => c.name === n.name) === idx)\n    };\n    return description;\n  }\n\n} // @ts-expect-error\n\nBaseSchema.prototype.__isYupSchema__ = true;\n\nfor (const method of ['validate', 'validateSync']) BaseSchema.prototype[`${method}At`] = function (path, value) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    parent,\n    parentPath,\n    schema\n  } = getIn(this, path, value, options.context);\n  return schema[method](parent && parent[parentPath], _extends({}, options, {\n    parent,\n    path\n  }));\n};\n\nfor (const alias of ['equals', 'is']) BaseSchema.prototype[alias] = BaseSchema.prototype.oneOf;\n\nfor (const alias of ['not', 'nope']) BaseSchema.prototype[alias] = BaseSchema.prototype.notOneOf;\n\nBaseSchema.prototype.optional = BaseSchema.prototype.notRequired;","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/yup/es/schema.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","cloneDeep","mixed","locale","Condition","runTests","createValidation","printValue","Ref","getIn","toArray","ValidationError","ReferenceSet","BaseSchema","constructor","options","deps","conditions","_whitelist","_blacklist","exclusiveTests","create","tests","transforms","withMutation","typeError","notType","type","spec","strip","strict","abortEarly","recursive","nullable","presence","_type","_typeCheck","_value","clone","_mutate","next","getPrototypeOf","_typeError","_whitelistError","_blacklistError","label","meta","fn","before","result","concat","schema","TypeError","base","combined","mergedSpec","merge","forEach","test","OPTIONS","isType","v","resolve","reduce","condition","cast","value","resolvedSchema","_cast","undefined","assert","formattedValue","formattedResult","path","rawValue","_options","getDefault","_validate","cb","sync","from","originalValue","args","initialTests","push","endEarly","err","validate","maybeCb","Promise","reject","validateSync","isValid","then","isError","isValidSync","_getDefault","defaultValue","default","def","isStrict","_isPresent","defined","message","name","exclusive","required","s","notRequired","filter","isNullable","transform","opts","isExclusive","when","keys","Array","isArray","map","dep","isSibling","createError","params","oneOf","enums","val","add","delete","valids","has","values","join","notOneOf","invalids","describe","description","n","idx","list","findIndex","c","__isYupSchema__","method","parent","parentPath","context","alias","optional"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// @ts-ignore\nimport cloneDeep from 'nanoclone';\nimport { mixed as locale } from './locale';\nimport Condition from './Condition';\nimport runTests from './util/runTests';\nimport createValidation from './util/createValidation';\nimport printValue from './util/printValue';\nimport Ref from './Reference';\nimport { getIn } from './util/reach';\nimport toArray from './util/toArray';\nimport ValidationError from './ValidationError';\nimport ReferenceSet from './util/ReferenceSet';\nexport default class BaseSchema {\n  constructor(options) {\n    this.deps = [];\n    this.conditions = [];\n    this._whitelist = new ReferenceSet();\n    this._blacklist = new ReferenceSet();\n    this.exclusiveTests = Object.create(null);\n    this.tests = [];\n    this.transforms = [];\n    this.withMutation(() => {\n      this.typeError(locale.notType);\n    });\n    this.type = (options == null ? void 0 : options.type) || 'mixed';\n    this.spec = _extends({\n      strip: false,\n      strict: false,\n      abortEarly: true,\n      recursive: true,\n      nullable: false,\n      presence: 'optional'\n    }, options == null ? void 0 : options.spec);\n  } // TODO: remove\n\n\n  get _type() {\n    return this.type;\n  }\n\n  _typeCheck(_value) {\n    return true;\n  }\n\n  clone(spec) {\n    if (this._mutate) {\n      if (spec) Object.assign(this.spec, spec);\n      return this;\n    } // if the nested value is a schema we can skip cloning, since\n    // they are already immutable\n\n\n    const next = Object.create(Object.getPrototypeOf(this)); // @ts-expect-error this is readonly\n\n    next.type = this.type;\n    next._typeError = this._typeError;\n    next._whitelistError = this._whitelistError;\n    next._blacklistError = this._blacklistError;\n    next._whitelist = this._whitelist.clone();\n    next._blacklist = this._blacklist.clone();\n    next.exclusiveTests = _extends({}, this.exclusiveTests); // @ts-expect-error this is readonly\n\n    next.deps = [...this.deps];\n    next.conditions = [...this.conditions];\n    next.tests = [...this.tests];\n    next.transforms = [...this.transforms];\n    next.spec = cloneDeep(_extends({}, this.spec, spec));\n    return next;\n  }\n\n  label(label) {\n    var next = this.clone();\n    next.spec.label = label;\n    return next;\n  }\n\n  meta(...args) {\n    if (args.length === 0) return this.spec.meta;\n    let next = this.clone();\n    next.spec.meta = Object.assign(next.spec.meta || {}, args[0]);\n    return next;\n  } // withContext<TContext extends AnyObject>(): BaseSchema<\n  //   TCast,\n  //   TContext,\n  //   TOutput\n  // > {\n  //   return this as any;\n  // }\n\n\n  withMutation(fn) {\n    let before = this._mutate;\n    this._mutate = true;\n    let result = fn(this);\n    this._mutate = before;\n    return result;\n  }\n\n  concat(schema) {\n    if (!schema || schema === this) return this;\n    if (schema.type !== this.type && this.type !== 'mixed') throw new TypeError(`You cannot \\`concat()\\` schema's of different types: ${this.type} and ${schema.type}`);\n    let base = this;\n    let combined = schema.clone();\n\n    const mergedSpec = _extends({}, base.spec, combined.spec); // if (combined.spec.nullable === UNSET)\n    //   mergedSpec.nullable = base.spec.nullable;\n    // if (combined.spec.presence === UNSET)\n    //   mergedSpec.presence = base.spec.presence;\n\n\n    combined.spec = mergedSpec;\n    combined._typeError || (combined._typeError = base._typeError);\n    combined._whitelistError || (combined._whitelistError = base._whitelistError);\n    combined._blacklistError || (combined._blacklistError = base._blacklistError); // manually merge the blacklist/whitelist (the other `schema` takes\n    // precedence in case of conflicts)\n\n    combined._whitelist = base._whitelist.merge(schema._whitelist, schema._blacklist);\n    combined._blacklist = base._blacklist.merge(schema._blacklist, schema._whitelist); // start with the current tests\n\n    combined.tests = base.tests;\n    combined.exclusiveTests = base.exclusiveTests; // manually add the new tests to ensure\n    // the deduping logic is consistent\n\n    combined.withMutation(next => {\n      schema.tests.forEach(fn => {\n        next.test(fn.OPTIONS);\n      });\n    });\n    return combined;\n  }\n\n  isType(v) {\n    if (this.spec.nullable && v === null) return true;\n    return this._typeCheck(v);\n  }\n\n  resolve(options) {\n    let schema = this;\n\n    if (schema.conditions.length) {\n      let conditions = schema.conditions;\n      schema = schema.clone();\n      schema.conditions = [];\n      schema = conditions.reduce((schema, condition) => condition.resolve(schema, options), schema);\n      schema = schema.resolve(options);\n    }\n\n    return schema;\n  }\n  /**\n   *\n   * @param {*} value\n   * @param {Object} options\n   * @param {*=} options.parent\n   * @param {*=} options.context\n   */\n\n\n  cast(value, options = {}) {\n    let resolvedSchema = this.resolve(_extends({\n      value\n    }, options));\n\n    let result = resolvedSchema._cast(value, options);\n\n    if (value !== undefined && options.assert !== false && resolvedSchema.isType(result) !== true) {\n      let formattedValue = printValue(value);\n      let formattedResult = printValue(result);\n      throw new TypeError(`The value of ${options.path || 'field'} could not be cast to a value ` + `that satisfies the schema type: \"${resolvedSchema._type}\". \\n\\n` + `attempted value: ${formattedValue} \\n` + (formattedResult !== formattedValue ? `result of cast: ${formattedResult}` : ''));\n    }\n\n    return result;\n  }\n\n  _cast(rawValue, _options) {\n    let value = rawValue === undefined ? rawValue : this.transforms.reduce((value, fn) => fn.call(this, value, rawValue, this), rawValue);\n\n    if (value === undefined) {\n      value = this.getDefault();\n    }\n\n    return value;\n  }\n\n  _validate(_value, options = {}, cb) {\n    let {\n      sync,\n      path,\n      from = [],\n      originalValue = _value,\n      strict = this.spec.strict,\n      abortEarly = this.spec.abortEarly\n    } = options;\n    let value = _value;\n\n    if (!strict) {\n      // this._validating = true;\n      value = this._cast(value, _extends({\n        assert: false\n      }, options)); // this._validating = false;\n    } // value is cast, we can check if it meets type requirements\n\n\n    let args = {\n      value,\n      path,\n      options,\n      originalValue,\n      schema: this,\n      label: this.spec.label,\n      sync,\n      from\n    };\n    let initialTests = [];\n    if (this._typeError) initialTests.push(this._typeError);\n    if (this._whitelistError) initialTests.push(this._whitelistError);\n    if (this._blacklistError) initialTests.push(this._blacklistError);\n    runTests({\n      args,\n      value,\n      path,\n      sync,\n      tests: initialTests,\n      endEarly: abortEarly\n    }, err => {\n      if (err) return void cb(err, value);\n      runTests({\n        tests: this.tests,\n        args,\n        path,\n        sync,\n        value,\n        endEarly: abortEarly\n      }, cb);\n    });\n  }\n\n  validate(value, options, maybeCb) {\n    let schema = this.resolve(_extends({}, options, {\n      value\n    })); // callback case is for nested validations\n\n    return typeof maybeCb === 'function' ? schema._validate(value, options, maybeCb) : new Promise((resolve, reject) => schema._validate(value, options, (err, value) => {\n      if (err) reject(err);else resolve(value);\n    }));\n  }\n\n  validateSync(value, options) {\n    let schema = this.resolve(_extends({}, options, {\n      value\n    }));\n    let result;\n\n    schema._validate(value, _extends({}, options, {\n      sync: true\n    }), (err, value) => {\n      if (err) throw err;\n      result = value;\n    });\n\n    return result;\n  }\n\n  isValid(value, options) {\n    return this.validate(value, options).then(() => true, err => {\n      if (ValidationError.isError(err)) return false;\n      throw err;\n    });\n  }\n\n  isValidSync(value, options) {\n    try {\n      this.validateSync(value, options);\n      return true;\n    } catch (err) {\n      if (ValidationError.isError(err)) return false;\n      throw err;\n    }\n  }\n\n  _getDefault() {\n    let defaultValue = this.spec.default;\n\n    if (defaultValue == null) {\n      return defaultValue;\n    }\n\n    return typeof defaultValue === 'function' ? defaultValue.call(this) : cloneDeep(defaultValue);\n  }\n\n  getDefault(options) {\n    let schema = this.resolve(options || {});\n    return schema._getDefault();\n  }\n\n  default(def) {\n    if (arguments.length === 0) {\n      return this._getDefault();\n    }\n\n    let next = this.clone({\n      default: def\n    });\n    return next;\n  }\n\n  strict(isStrict = true) {\n    var next = this.clone();\n    next.spec.strict = isStrict;\n    return next;\n  }\n\n  _isPresent(value) {\n    return value != null;\n  }\n\n  defined(message = locale.defined) {\n    return this.test({\n      message,\n      name: 'defined',\n      exclusive: true,\n\n      test(value) {\n        return value !== undefined;\n      }\n\n    });\n  }\n\n  required(message = locale.required) {\n    return this.clone({\n      presence: 'required'\n    }).withMutation(s => s.test({\n      message,\n      name: 'required',\n      exclusive: true,\n\n      test(value) {\n        return this.schema._isPresent(value);\n      }\n\n    }));\n  }\n\n  notRequired() {\n    var next = this.clone({\n      presence: 'optional'\n    });\n    next.tests = next.tests.filter(test => test.OPTIONS.name !== 'required');\n    return next;\n  }\n\n  nullable(isNullable = true) {\n    var next = this.clone({\n      nullable: isNullable !== false\n    });\n    return next;\n  }\n\n  transform(fn) {\n    var next = this.clone();\n    next.transforms.push(fn);\n    return next;\n  }\n  /**\n   * Adds a test function to the schema's queue of tests.\n   * tests can be exclusive or non-exclusive.\n   *\n   * - exclusive tests, will replace any existing tests of the same name.\n   * - non-exclusive: can be stacked\n   *\n   * If a non-exclusive test is added to a schema with an exclusive test of the same name\n   * the exclusive test is removed and further tests of the same name will be stacked.\n   *\n   * If an exclusive test is added to a schema with non-exclusive tests of the same name\n   * the previous tests are removed and further tests of the same name will replace each other.\n   */\n\n\n  test(...args) {\n    let opts;\n\n    if (args.length === 1) {\n      if (typeof args[0] === 'function') {\n        opts = {\n          test: args[0]\n        };\n      } else {\n        opts = args[0];\n      }\n    } else if (args.length === 2) {\n      opts = {\n        name: args[0],\n        test: args[1]\n      };\n    } else {\n      opts = {\n        name: args[0],\n        message: args[1],\n        test: args[2]\n      };\n    }\n\n    if (opts.message === undefined) opts.message = locale.default;\n    if (typeof opts.test !== 'function') throw new TypeError('`test` is a required parameters');\n    let next = this.clone();\n    let validate = createValidation(opts);\n    let isExclusive = opts.exclusive || opts.name && next.exclusiveTests[opts.name] === true;\n\n    if (opts.exclusive) {\n      if (!opts.name) throw new TypeError('Exclusive tests must provide a unique `name` identifying the test');\n    }\n\n    if (opts.name) next.exclusiveTests[opts.name] = !!opts.exclusive;\n    next.tests = next.tests.filter(fn => {\n      if (fn.OPTIONS.name === opts.name) {\n        if (isExclusive) return false;\n        if (fn.OPTIONS.test === validate.OPTIONS.test) return false;\n      }\n\n      return true;\n    });\n    next.tests.push(validate);\n    return next;\n  }\n\n  when(keys, options) {\n    if (!Array.isArray(keys) && typeof keys !== 'string') {\n      options = keys;\n      keys = '.';\n    }\n\n    let next = this.clone();\n    let deps = toArray(keys).map(key => new Ref(key));\n    deps.forEach(dep => {\n      // @ts-ignore\n      if (dep.isSibling) next.deps.push(dep.key);\n    });\n    next.conditions.push(new Condition(deps, options));\n    return next;\n  }\n\n  typeError(message) {\n    var next = this.clone();\n    next._typeError = createValidation({\n      message,\n      name: 'typeError',\n\n      test(value) {\n        if (value !== undefined && !this.schema.isType(value)) return this.createError({\n          params: {\n            type: this.schema._type\n          }\n        });\n        return true;\n      }\n\n    });\n    return next;\n  }\n\n  oneOf(enums, message = locale.oneOf) {\n    var next = this.clone();\n    enums.forEach(val => {\n      next._whitelist.add(val);\n\n      next._blacklist.delete(val);\n    });\n    next._whitelistError = createValidation({\n      message,\n      name: 'oneOf',\n\n      test(value) {\n        if (value === undefined) return true;\n        let valids = this.schema._whitelist;\n        return valids.has(value, this.resolve) ? true : this.createError({\n          params: {\n            values: valids.toArray().join(', ')\n          }\n        });\n      }\n\n    });\n    return next;\n  }\n\n  notOneOf(enums, message = locale.notOneOf) {\n    var next = this.clone();\n    enums.forEach(val => {\n      next._blacklist.add(val);\n\n      next._whitelist.delete(val);\n    });\n    next._blacklistError = createValidation({\n      message,\n      name: 'notOneOf',\n\n      test(value) {\n        let invalids = this.schema._blacklist;\n        if (invalids.has(value, this.resolve)) return this.createError({\n          params: {\n            values: invalids.toArray().join(', ')\n          }\n        });\n        return true;\n      }\n\n    });\n    return next;\n  }\n\n  strip(strip = true) {\n    let next = this.clone();\n    next.spec.strip = strip;\n    return next;\n  }\n\n  describe() {\n    const next = this.clone();\n    const {\n      label,\n      meta\n    } = next.spec;\n    const description = {\n      meta,\n      label,\n      type: next.type,\n      oneOf: next._whitelist.describe(),\n      notOneOf: next._blacklist.describe(),\n      tests: next.tests.map(fn => ({\n        name: fn.OPTIONS.name,\n        params: fn.OPTIONS.params\n      })).filter((n, idx, list) => list.findIndex(c => c.name === n.name) === idx)\n    };\n    return description;\n  }\n\n}\n// @ts-expect-error\nBaseSchema.prototype.__isYupSchema__ = true;\n\nfor (const method of ['validate', 'validateSync']) BaseSchema.prototype[`${method}At`] = function (path, value, options = {}) {\n  const {\n    parent,\n    parentPath,\n    schema\n  } = getIn(this, path, value, options.context);\n  return schema[method](parent && parent[parentPath], _extends({}, options, {\n    parent,\n    path\n  }));\n};\n\nfor (const alias of ['equals', 'is']) BaseSchema.prototype[alias] = BaseSchema.prototype.oneOf;\n\nfor (const alias of ['not', 'nope']) BaseSchema.prototype[alias] = BaseSchema.prototype.notOneOf;\n\nBaseSchema.prototype.optional = BaseSchema.prototype.notRequired;"]},"metadata":{},"sourceType":"module"}