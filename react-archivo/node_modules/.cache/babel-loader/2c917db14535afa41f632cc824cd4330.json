{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { ok as assert } from 'uvu/assert';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { labelEnd } from './label-end.js';\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(code === codes.exclamationMark, 'expected `!`');\n    effects.enter(types.labelImage);\n    effects.enter(types.labelImageMarker);\n    effects.consume(code);\n    effects.exit(types.labelImageMarker);\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (code === codes.leftSquareBracket) {\n      effects.enter(types.labelMarker);\n      effects.consume(code);\n      effects.exit(types.labelMarker);\n      effects.exit(types.labelImage);\n      return after;\n    }\n\n    return nok(code);\n  }\n  /** @type {State} */\n\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === codes.caret && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/micromark-core-commonmark/dev/lib/label-start-image.js"],"names":["ok","assert","codes","types","labelEnd","labelStartImage","name","tokenize","tokenizeLabelStartImage","resolveAll","effects","nok","self","start","code","exclamationMark","enter","labelImage","labelImageMarker","consume","exit","open","leftSquareBracket","labelMarker","after","caret","parser","constructs"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAAQA,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AAEA;;AACA,OAAO,MAAMC,eAAe,GAAG;AAC7BC,EAAAA,IAAI,EAAE,iBADuB;AAE7BC,EAAAA,QAAQ,EAAEC,uBAFmB;AAG7BC,EAAAA,UAAU,EAAEL,QAAQ,CAACK;AAHQ,CAAxB;AAMP;;AACA,SAASD,uBAAT,CAAiCE,OAAjC,EAA0CV,EAA1C,EAA8CW,GAA9C,EAAmD;AACjD,QAAMC,IAAI,GAAG,IAAb;AAEA,SAAOC,KAAP;AAEA;;AACA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnBb,IAAAA,MAAM,CAACa,IAAI,KAAKZ,KAAK,CAACa,eAAhB,EAAiC,cAAjC,CAAN;AACAL,IAAAA,OAAO,CAACM,KAAR,CAAcb,KAAK,CAACc,UAApB;AACAP,IAAAA,OAAO,CAACM,KAAR,CAAcb,KAAK,CAACe,gBAApB;AACAR,IAAAA,OAAO,CAACS,OAAR,CAAgBL,IAAhB;AACAJ,IAAAA,OAAO,CAACU,IAAR,CAAajB,KAAK,CAACe,gBAAnB;AACA,WAAOG,IAAP;AACD;AAED;;;AACA,WAASA,IAAT,CAAcP,IAAd,EAAoB;AAClB,QAAIA,IAAI,KAAKZ,KAAK,CAACoB,iBAAnB,EAAsC;AACpCZ,MAAAA,OAAO,CAACM,KAAR,CAAcb,KAAK,CAACoB,WAApB;AACAb,MAAAA,OAAO,CAACS,OAAR,CAAgBL,IAAhB;AACAJ,MAAAA,OAAO,CAACU,IAAR,CAAajB,KAAK,CAACoB,WAAnB;AACAb,MAAAA,OAAO,CAACU,IAAR,CAAajB,KAAK,CAACc,UAAnB;AACA,aAAOO,KAAP;AACD;;AAED,WAAOb,GAAG,CAACG,IAAD,CAAV;AACD;AAED;;;AACA,WAASU,KAAT,CAAeV,IAAf,EAAqB;AACnB;AACJ;AACA;;AACI;;AACA;AACA,WAAOA,IAAI,KAAKZ,KAAK,CAACuB,KAAf,IACL,4BAA4Bb,IAAI,CAACc,MAAL,CAAYC,UADnC,GAEHhB,GAAG,CAACG,IAAD,CAFA,GAGHd,EAAE,CAACc,IAAD,CAHN;AAID;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.exclamationMark, 'expected `!`')\n    effects.enter(types.labelImage)\n    effects.enter(types.labelImageMarker)\n    effects.consume(code)\n    effects.exit(types.labelImageMarker)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (code === codes.leftSquareBracket) {\n      effects.enter(types.labelMarker)\n      effects.consume(code)\n      effects.exit(types.labelMarker)\n      effects.exit(types.labelImage)\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n    /* Hidden footnotes hook */\n    /* c8 ignore next 3 */\n    return code === codes.caret &&\n      '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}