{"ast":null,"code":"import { createLayerComponent, updateMediaOverlay } from '@react-leaflet/core';\nimport { ImageOverlay as LeafletImageOverlay } from 'leaflet';\nexport const ImageOverlay = createLayerComponent(function createImageOveraly(_ref, ctx) {\n  let {\n    bounds,\n    url,\n    ...options\n  } = _ref;\n  const instance = new LeafletImageOverlay(url, bounds, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateImageOverlay(overlay, props, prevProps) {\n  updateMediaOverlay(overlay, props, prevProps);\n\n  if (props.url !== prevProps.url) {\n    overlay.setUrl(props.url);\n  }\n});","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/react-leaflet/esm/ImageOverlay.js"],"names":["createLayerComponent","updateMediaOverlay","ImageOverlay","LeafletImageOverlay","createImageOveraly","ctx","bounds","url","options","instance","context","overlayContainer","updateImageOverlay","overlay","props","prevProps","setUrl"],"mappings":"AAAA,SAASA,oBAAT,EAA+BC,kBAA/B,QAAyD,qBAAzD;AACA,SAASC,YAAY,IAAIC,mBAAzB,QAAoD,SAApD;AACA,OAAO,MAAMD,YAAY,GAAGF,oBAAoB,CAAC,SAASI,kBAAT,OAI9CC,GAJ8C,EAIzC;AAAA,MAJqE;AAC3EC,IAAAA,MAD2E;AAE3EC,IAAAA,GAF2E;AAG3E,OAAGC;AAHwE,GAIrE;AACN,QAAMC,QAAQ,GAAG,IAAIN,mBAAJ,CAAwBI,GAAxB,EAA6BD,MAA7B,EAAqCE,OAArC,CAAjB;AACA,SAAO;AACLC,IAAAA,QADK;AAELC,IAAAA,OAAO,EAAE,EAAE,GAAGL,GAAL;AACPM,MAAAA,gBAAgB,EAAEF;AADX;AAFJ,GAAP;AAMD,CAZ+C,EAY7C,SAASG,kBAAT,CAA4BC,OAA5B,EAAqCC,KAArC,EAA4CC,SAA5C,EAAuD;AACxDd,EAAAA,kBAAkB,CAACY,OAAD,EAAUC,KAAV,EAAiBC,SAAjB,CAAlB;;AAEA,MAAID,KAAK,CAACP,GAAN,KAAcQ,SAAS,CAACR,GAA5B,EAAiC;AAC/BM,IAAAA,OAAO,CAACG,MAAR,CAAeF,KAAK,CAACP,GAArB;AACD;AACF,CAlB+C,CAAzC","sourcesContent":["import { createLayerComponent, updateMediaOverlay } from '@react-leaflet/core';\nimport { ImageOverlay as LeafletImageOverlay } from 'leaflet';\nexport const ImageOverlay = createLayerComponent(function createImageOveraly({\n  bounds,\n  url,\n  ...options\n}, ctx) {\n  const instance = new LeafletImageOverlay(url, bounds, options);\n  return {\n    instance,\n    context: { ...ctx,\n      overlayContainer: instance\n    }\n  };\n}, function updateImageOverlay(overlay, props, prevProps) {\n  updateMediaOverlay(overlay, props, prevProps);\n\n  if (props.url !== prevProps.url) {\n    overlay.setUrl(props.url);\n  }\n});"]},"metadata":{},"sourceType":"module"}