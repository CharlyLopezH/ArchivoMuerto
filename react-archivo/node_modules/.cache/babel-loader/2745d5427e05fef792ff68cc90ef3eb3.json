{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { ok as assert } from 'uvu/assert';\nimport { asciiPunctuation } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {Construct} */\n\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`');\n    effects.enter(types.characterEscape);\n    effects.enter(types.escapeMarker);\n    effects.consume(code);\n    effects.exit(types.escapeMarker);\n    return open;\n  }\n  /** @type {State} */\n\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter(types.characterEscapeValue);\n      effects.consume(code);\n      effects.exit(types.characterEscapeValue);\n      effects.exit(types.characterEscape);\n      return ok;\n    }\n\n    return nok(code);\n  }\n}","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/micromark-core-commonmark/dev/lib/character-escape.js"],"names":["ok","assert","asciiPunctuation","codes","types","characterEscape","name","tokenize","tokenizeCharacterEscape","effects","nok","start","code","backslash","enter","escapeMarker","consume","exit","open","characterEscapeValue"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAAQA,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AACA,SAAQC,gBAAR,QAA+B,0BAA/B;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,KAAR,QAAoB,gCAApB;AAEA;;AACA,OAAO,MAAMC,eAAe,GAAG;AAC7BC,EAAAA,IAAI,EAAE,iBADuB;AAE7BC,EAAAA,QAAQ,EAAEC;AAFmB,CAAxB;AAKP;;AACA,SAASA,uBAAT,CAAiCC,OAAjC,EAA0CT,EAA1C,EAA8CU,GAA9C,EAAmD;AACjD,SAAOC,KAAP;AAEA;;AACA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnBX,IAAAA,MAAM,CAACW,IAAI,KAAKT,KAAK,CAACU,SAAhB,EAA2B,eAA3B,CAAN;AACAJ,IAAAA,OAAO,CAACK,KAAR,CAAcV,KAAK,CAACC,eAApB;AACAI,IAAAA,OAAO,CAACK,KAAR,CAAcV,KAAK,CAACW,YAApB;AACAN,IAAAA,OAAO,CAACO,OAAR,CAAgBJ,IAAhB;AACAH,IAAAA,OAAO,CAACQ,IAAR,CAAab,KAAK,CAACW,YAAnB;AACA,WAAOG,IAAP;AACD;AAED;;;AACA,WAASA,IAAT,CAAcN,IAAd,EAAoB;AAClB,QAAIV,gBAAgB,CAACU,IAAD,CAApB,EAA4B;AAC1BH,MAAAA,OAAO,CAACK,KAAR,CAAcV,KAAK,CAACe,oBAApB;AACAV,MAAAA,OAAO,CAACO,OAAR,CAAgBJ,IAAhB;AACAH,MAAAA,OAAO,CAACQ,IAAR,CAAab,KAAK,CAACe,oBAAnB;AACAV,MAAAA,OAAO,CAACQ,IAAR,CAAab,KAAK,CAACC,eAAnB;AACA,aAAOL,EAAP;AACD;;AAED,WAAOU,GAAG,CAACE,IAAD,CAAV;AACD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {asciiPunctuation} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`')\n    effects.enter(types.characterEscape)\n    effects.enter(types.escapeMarker)\n    effects.consume(code)\n    effects.exit(types.escapeMarker)\n    return open\n  }\n\n  /** @type {State} */\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter(types.characterEscapeValue)\n      effects.consume(code)\n      effects.exit(types.characterEscapeValue)\n      effects.exit(types.characterEscape)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}