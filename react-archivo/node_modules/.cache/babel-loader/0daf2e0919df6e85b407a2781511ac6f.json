{"ast":null,"code":"var _jsxFileName = \"C:\\\\reactjs\\\\Udemy\\\\NetCore\\\\react-peliculas\\\\src\\\\peliculas\\\\FormularioPeliculas.tsx\";\nimport { Form, Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport MyFormGroupText from \"../utils/FormGroupText\";\nimport FormGroupCheckbox from \"../utils/FormGroupCheckbox\";\nimport FormGroupFecha from \"../utils/FormGroupFecha\";\nimport FormGroupImagen from \"../utils/FormGroupImagen\";\nimport Button from \"../utils/Button\";\nimport { Link } from \"react-router-dom\";\nimport SelectorMultiple from \"../utils/SelectorMultiple\";\nimport { useState } from \"react\";\nimport TypeAheadActores from \"../actores/TypeAheadActores\";\nimport FormGroupMarkdown from \"../utils/FormGroupMarkdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function (props) {\n  const [generosSeleccionados, setGenerosSeleccionados] = useState(mapear(props.generosSeleccionados));\n  const [generosNoSeleccionados, setGenerosNoSeleccionados] = useState(mapear(props.generosNoSeleccionados));\n  const [cinesSeleccionados, setCinesSeleccionados] = useState(mapear(props.cinesSeleccionados));\n  const [cinesNoSeleccionados, setCinesNoSeleccionados] = useState(mapear(props.cinesNoSeleccionados));\n  const [actoresSeleccionados, setActoresSeleccionados] = useState(props.actoresSeleccionados);\n\n  function mapear(arreglo) {\n    return arreglo.map(valor => {\n      return {\n        llave: valor.id,\n        valor: valor.nombre\n      };\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: props.modelo,\n    onSubmit: (valores, acciones) => {\n      valores.generosIds = generosSeleccionados.map(valor => valor.llave);\n      valores.cinesIds = cinesSeleccionados.map(valor => valor.llave);\n      valores.actores = actoresSeleccionados;\n      props.onSubmit(valores, acciones);\n    },\n    validationSchema: Yup.object({\n      titulo: Yup.string().required(\"Campo requerido\").primeraLetraMayuscula()\n    }),\n    children: formikProps => /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(MyFormGroupText, {\n        label: \"T\\xEDitulo\",\n        campo: \"titulo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FormGroupCheckbox, {\n        label: \"en Cines\",\n        campo: \"enCines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MyFormGroupText, {\n        label: \"Trailer\",\n        campo: \"trailer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FormGroupFecha, {\n        campo: \"fechaLanzamiento\",\n        label: \"Fecha Lanzamiento\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FormGroupImagen, {\n        campo: \"poster\",\n        label: \"Poster\",\n        imagenURL: props.modelo.posterURL\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FormGroupMarkdown, {\n        campo: \"resumen\",\n        label: \"Resumen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"G\\xE9neros\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(SelectorMultiple, {\n          seleccionados: generosSeleccionados,\n          noSeleccionados: generosNoSeleccionados,\n          onChange: (seleccionados, noSeleccionados) => {\n            setGenerosSeleccionados(seleccionados);\n            setGenerosNoSeleccionados(noSeleccionados);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Cines:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SelectorMultiple, {\n          seleccionados: cinesSeleccionados,\n          noSeleccionados: cinesNoSeleccionados,\n          onChange: (seleccionados, noSeleccionados) => {\n            setCinesSeleccionados(seleccionados);\n            setCinesNoSeleccionados(noSeleccionados);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(TypeAheadActores, {\n          onAdd: actores => {\n            setActoresSeleccionados(actores);\n          },\n          onRemove: actor => {\n            const actores = actoresSeleccionados.filter(x => x !== actor);\n            setActoresSeleccionados(actores);\n          },\n          actores: actoresSeleccionados,\n          listadoUI: actor => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [actor.nombre, \" / \", /*#__PURE__*/_jsxDEV(\"input\", {\n              placeholder: \"Personaje\",\n              type: \"text\",\n              value: actor.personaje,\n              onChange: e => {\n                const indice = actoresSeleccionados.findIndex(x => x.id === actor.id);\n                const actores = [...actoresSeleccionados];\n                actores[indice].personaje = e.currentTarget.value;\n                setActoresSeleccionados(actores);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 38\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: formikProps.isSubmitting,\n        type: \"submit\",\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        className: \"btn btn-secondary\",\n        to: \"/\",\n        children: \"Cancelar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 7\n  }, this);\n}","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/src/peliculas/FormularioPeliculas.tsx"],"names":["Form","Formik","Yup","MyFormGroupText","FormGroupCheckbox","FormGroupFecha","FormGroupImagen","Button","Link","SelectorMultiple","useState","TypeAheadActores","FormGroupMarkdown","props","generosSeleccionados","setGenerosSeleccionados","mapear","generosNoSeleccionados","setGenerosNoSeleccionados","cinesSeleccionados","setCinesSeleccionados","cinesNoSeleccionados","setCinesNoSeleccionados","actoresSeleccionados","setActoresSeleccionados","arreglo","map","valor","llave","id","nombre","modelo","valores","acciones","generosIds","cinesIds","actores","onSubmit","object","titulo","string","required","primeraLetraMayuscula","formikProps","posterURL","seleccionados","noSeleccionados","actor","filter","x","personaje","e","indice","findIndex","currentTarget","value","isSubmitting"],"mappings":";AAAA,SAASA,IAAT,EAAeC,MAAf,QAA4C,QAA5C;AAEA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,eAAP,MAA4B,wBAA5B;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,gBAAP,MAAwD,2BAAxD;AAEA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,gBAAP,MAA6B,6BAA7B;AAEA,OAAOC,iBAAP,MAA8B,4BAA9B;;;AAEA,eAAe,UAAUC,KAAV,EAA4C;AACvD,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDL,QAAQ,CAACM,MAAM,CAACH,KAAK,CAACC,oBAAP,CAAP,CAAhE;AACA,QAAM,CAACG,sBAAD,EAAyBC,yBAAzB,IAAsDR,QAAQ,CAACM,MAAM,CAACH,KAAK,CAACI,sBAAP,CAAP,CAApE;AAEA,QAAK,CAACE,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAACM,MAAM,CAACH,KAAK,CAACM,kBAAP,CAAP,CAA3D;AACA,QAAK,CAACE,oBAAD,EAAuBC,uBAAvB,IAAkDZ,QAAQ,CAACM,MAAM,CAACH,KAAK,CAACQ,oBAAP,CAAP,CAA/D;AAEA,QAAM,CAACE,oBAAD,EAAuBC,uBAAvB,IAAkDd,QAAQ,CAAqBG,KAAK,CAACU,oBAA3B,CAAhE;;AAIA,WAASP,MAAT,CAAgBS,OAAhB,EAA8E;AAC1E,WAAOA,OAAO,CAACC,GAAR,CAAYC,KAAK,IAAE;AACtB,aAAO;AAACC,QAAAA,KAAK,EAACD,KAAK,CAACE,EAAb;AAAiBF,QAAAA,KAAK,EAACA,KAAK,CAACG;AAA7B,OAAP;AACH,KAFM,CAAP;AAGH;;AAED,sBACE,QAAC,MAAD;AACE,IAAA,aAAa,EAAEjB,KAAK,CAACkB,MADvB;AAEE,IAAA,QAAQ,EAAE,CAACC,OAAD,EAAUC,QAAV,KAAuB;AAC/BD,MAAAA,OAAO,CAACE,UAAR,GAAqBpB,oBAAoB,CAACY,GAArB,CAAyBC,KAAK,IAAIA,KAAK,CAACC,KAAxC,CAArB;AACAI,MAAAA,OAAO,CAACG,QAAR,GAAmBhB,kBAAkB,CAACO,GAAnB,CAAuBC,KAAK,IAAGA,KAAK,CAACC,KAArC,CAAnB;AACAI,MAAAA,OAAO,CAACI,OAAR,GAAkBb,oBAAlB;AACAV,MAAAA,KAAK,CAACwB,QAAN,CAAeL,OAAf,EAAwBC,QAAxB;AACD,KAPH;AAQE,IAAA,gBAAgB,EAAE/B,GAAG,CAACoC,MAAJ,CAAW;AAC3BC,MAAAA,MAAM,EAAErC,GAAG,CAACsC,MAAJ,GACLC,QADK,CACI,iBADJ,EAELC,qBAFK;AADmB,KAAX,CARpB;AAAA,cAcIC,WAAD,iBACC,QAAC,IAAD;AAAA,8BACE,QAAC,eAAD;AAAiB,QAAA,KAAK,EAAC,YAAvB;AAAiC,QAAA,KAAK,EAAC;AAAvC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,iBAAD;AAAmB,QAAA,KAAK,EAAC,UAAzB;AAAoC,QAAA,KAAK,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,eAAD;AAAiB,QAAA,KAAK,EAAC,SAAvB;AAAiC,QAAA,KAAK,EAAC;AAAvC;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,cAAD;AACE,QAAA,KAAK,EAAC,kBADR;AAEE,QAAA,KAAK,EAAC;AAFR;AAAA;AAAA;AAAA;AAAA,cAJF,eAQE,QAAC,eAAD;AACE,QAAA,KAAK,EAAC,QADR;AAEE,QAAA,KAAK,EAAC,QAFR;AAGE,QAAA,SAAS,EAAE9B,KAAK,CAACkB,MAAN,CAAaa;AAH1B;AAAA;AAAA;AAAA;AAAA,cARF,eAcE,QAAC,iBAAD;AAAmB,QAAA,KAAK,EAAC,SAAzB;AAAmC,QAAA,KAAK,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cAdF,eAgBE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,gBAAD;AACE,UAAA,aAAa,EAAE9B,oBADjB;AAEE,UAAA,eAAe,EAAEG,sBAFnB;AAGE,UAAA,QAAQ,EAAE,CAAC4B,aAAD,EAAgBC,eAAhB,KAAoC;AAC5C/B,YAAAA,uBAAuB,CAAC8B,aAAD,CAAvB;AACA3B,YAAAA,yBAAyB,CAAC4B,eAAD,CAAzB;AACD;AANH;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBF,eA4BE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADR,eAEQ,QAAC,gBAAD;AACA,UAAA,aAAa,EAAE3B,kBADf;AAEA,UAAA,eAAe,EAAEE,oBAFjB;AAGA,UAAA,QAAQ,EAAE,CAACwB,aAAD,EAAgBC,eAAhB,KAAmC;AACzC1B,YAAAA,qBAAqB,CAACyB,aAAD,CAArB;AACAvB,YAAAA,uBAAuB,CAACwB,eAAD,CAAvB;AACH;AAND;AAAA;AAAA;AAAA;AAAA,gBAFR;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BF,eAwCM;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI,QAAC,gBAAD;AACA,UAAA,KAAK,EAAEV,OAAO,IAAE;AACdZ,YAAAA,uBAAuB,CAACY,OAAD,CAAvB;AACD,WAHD;AAIA,UAAA,QAAQ,EAAEW,KAAK,IAAG;AACjB,kBAAMX,OAAO,GAAGb,oBAAoB,CAACyB,MAArB,CAA4BC,CAAC,IAAEA,CAAC,KAAGF,KAAnC,CAAhB;AACAvB,YAAAA,uBAAuB,CAACY,OAAD,CAAvB;AACA,WAPD;AASA,UAAA,OAAO,EAAEb,oBATT;AAUA,UAAA,SAAS,EAAGwB,KAAD,iBACX;AAAA,uBACCA,KAAK,CAACjB,MADP,sBACiB;AAAO,cAAA,WAAW,EAAG,WAArB;AACC,cAAA,IAAI,EAAE,MADP;AACc,cAAA,KAAK,EAAEiB,KAAK,CAACG,SAD3B;AAEC,cAAA,QAAQ,EAAEC,CAAC,IAAG;AACZ,sBAAMC,MAAM,GAAG7B,oBAAoB,CACnC8B,SADe,CACLJ,CAAC,IAAEA,CAAC,CAACpB,EAAF,KAAOkB,KAAK,CAAClB,EADX,CAAf;AAEA,sBAAMO,OAAO,GAAC,CAAC,GAAGb,oBAAJ,CAAd;AACAa,gBAAAA,OAAO,CAACgB,MAAD,CAAP,CAAgBF,SAAhB,GAA4BC,CAAC,CAACG,aAAF,CAAgBC,KAA5C;AACA/B,gBAAAA,uBAAuB,CAACY,OAAD,CAAvB;AACD;AARF;AAAA;AAAA;AAAA;AAAA,oBADjB;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAxCN,eAuEE,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAEO,WAAW,CAACa,YAA9B;AAA4C,QAAA,IAAI,EAAC,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvEF,eA0EE,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,mBAAhB;AAAoC,QAAA,EAAE,EAAC,GAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1EF;AAAA;AAAA;AAAA;AAAA;AAAA;AAfJ;AAAA;AAAA;AAAA;AAAA,UADF;AAkGH","sourcesContent":["import { Form, Formik, FormikHelpers } from \"formik\";\r\nimport { peliculaCreacionDTO } from \"./peliculas.model\";\r\nimport * as Yup from 'yup';\r\nimport MyFormGroupText from \"../utils/FormGroupText\";\r\nimport FormGroupCheckbox from \"../utils/FormGroupCheckbox\";\r\nimport FormGroupFecha from \"../utils/FormGroupFecha\";\r\nimport FormGroupImagen from \"../utils/FormGroupImagen\";\r\nimport Button from \"../utils/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SelectorMultiple, { selectorMultipleModel } from \"../utils/SelectorMultiple\";\r\nimport { generoDTO } from \"../generos/generos.model\";\r\nimport { useState } from \"react\";\r\nimport { cineDTO } from \"../cines/cines.model\";\r\nimport TypeAheadActores from \"../actores/TypeAheadActores\";\r\nimport { actorPeliculaDTO } from \"../actores/actores.model\";\r\nimport FormGroupMarkdown from \"../utils/FormGroupMarkdown\";\r\n\r\nexport default function (props: iFormularioPeliculasProps) {\r\n    const [generosSeleccionados, setGenerosSeleccionados] = useState(mapear(props.generosSeleccionados));\r\n    const [generosNoSeleccionados, setGenerosNoSeleccionados] = useState(mapear(props.generosNoSeleccionados));\r\n\r\n    const[cinesSeleccionados, setCinesSeleccionados] = useState(mapear(props.cinesSeleccionados));\r\n    const[cinesNoSeleccionados, setCinesNoSeleccionados] = useState(mapear(props.cinesNoSeleccionados));\r\n\r\n    const [actoresSeleccionados, setActoresSeleccionados] = useState<actorPeliculaDTO[]>(props.actoresSeleccionados);\r\n\r\n\r\n    \r\n    function mapear(arreglo: {id:number, nombre:string}[]):selectorMultipleModel[]{\r\n        return arreglo.map(valor=>{\r\n            return {llave:valor.id, valor:valor.nombre}\r\n        }) \r\n    }\r\n\r\n    return (\r\n      <Formik\r\n        initialValues={props.modelo}\r\n        onSubmit={(valores, acciones) => {\r\n          valores.generosIds = generosSeleccionados.map(valor => valor.llave);\r\n          valores.cinesIds = cinesSeleccionados.map(valor=> valor.llave); \r\n          valores.actores = actoresSeleccionados;\r\n          props.onSubmit(valores, acciones);\r\n        }}\r\n        validationSchema={Yup.object({\r\n          titulo: Yup.string()\r\n            .required(\"Campo requerido\")\r\n            .primeraLetraMayuscula(),\r\n        })}\r\n      >\r\n        {(formikProps) => (\r\n          <Form>\r\n            <MyFormGroupText label=\"Tíitulo\" campo=\"titulo\" />\r\n            <FormGroupCheckbox label=\"en Cines\" campo=\"enCines\" />\r\n            <MyFormGroupText label=\"Trailer\" campo=\"trailer\" />\r\n            <FormGroupFecha\r\n              campo=\"fechaLanzamiento\"\r\n              label=\"Fecha Lanzamiento\"\r\n            />\r\n            <FormGroupImagen\r\n              campo=\"poster\"\r\n              label=\"Poster\"\r\n              imagenURL={props.modelo.posterURL}\r\n            />\r\n\r\n            <FormGroupMarkdown campo=\"resumen\" label=\"Resumen\" />\r\n\r\n            <div className=\"form-group\">\r\n              <label>Géneros</label>\r\n              <SelectorMultiple\r\n                seleccionados={generosSeleccionados}\r\n                noSeleccionados={generosNoSeleccionados}\r\n                onChange={(seleccionados, noSeleccionados) => {\r\n                  setGenerosSeleccionados(seleccionados);\r\n                  setGenerosNoSeleccionados(noSeleccionados);\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\"> \r\n                    <label>Cines:</label>\r\n                    <SelectorMultiple \r\n                    seleccionados={cinesSeleccionados}\r\n                    noSeleccionados={cinesNoSeleccionados}\r\n                    onChange={(seleccionados, noSeleccionados)=> {\r\n                        setCinesSeleccionados(seleccionados)\r\n                        setCinesNoSeleccionados(noSeleccionados);\r\n                    }}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <TypeAheadActores \r\n                    onAdd={actores=>{\r\n                      setActoresSeleccionados(actores);\r\n                    }}\r\n                    onRemove={actor=> {\r\n                     const actores = actoresSeleccionados.filter(x=>x!==actor);\r\n                     setActoresSeleccionados(actores);\r\n                    }\r\n                    }\r\n                    actores={actoresSeleccionados}\r\n                    listadoUI={(actor: actorPeliculaDTO)=>\r\n                    <>\r\n                    {actor.nombre} / <input placeholder = \"Personaje\" \r\n                                      type= \"text\" value={actor.personaje}\r\n                                      onChange={e=> {\r\n                                        const indice = actoresSeleccionados.\r\n                                        findIndex(x=>x.id===actor.id);\r\n                                        const actores=[...actoresSeleccionados];\r\n                                        actores[indice].personaje = e.currentTarget.value;\r\n                                        setActoresSeleccionados(actores);\r\n                                      }}\r\n                                      />\r\n                    </>\r\n                  }\r\n                    />\r\n                </div>\r\n\r\n\r\n\r\n\r\n            <Button disabled={formikProps.isSubmitting} type=\"submit\">\r\n              Enviar\r\n            </Button>\r\n            <Link className=\"btn btn-secondary\" to=\"/\">\r\n              Cancelar\r\n            </Link>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    );\r\n\r\n}\r\n\r\ninterface iFormularioPeliculasProps {\r\nmodelo : peliculaCreacionDTO;\r\nonSubmit(valores: peliculaCreacionDTO, acciones: FormikHelpers<peliculaCreacionDTO>):void;\r\ngenerosSeleccionados:generoDTO[];\r\ngenerosNoSeleccionados:generoDTO[];\r\ncinesSeleccionados:cineDTO[];\r\ncinesNoSeleccionados:cineDTO[];\r\nactoresSeleccionados:actorPeliculaDTO[];\r\n}"]},"metadata":{},"sourceType":"module"}