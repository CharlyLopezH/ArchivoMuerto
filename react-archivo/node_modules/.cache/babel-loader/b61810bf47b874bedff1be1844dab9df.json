{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\n\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(code === codes.quotationMark || code === codes.apostrophe || code === codes.leftParenthesis, 'expected `\"`, `\\'`, or `(`');\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    marker = code === codes.leftParenthesis ? codes.rightParenthesis : code;\n    return atFirstTitleBreak;\n  }\n  /** @type {State} */\n\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    effects.enter(stringType);\n    return atTitleBreak(code);\n  }\n  /** @type {State} */\n\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return atFirstTitleBreak(marker);\n    }\n\n    if (code === codes.eof) {\n      return nok(code);\n    } // Note: blank lines can’t exist in content.\n\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return factorySpace(effects, atTitleBreak, types.linePrefix);\n    }\n\n    effects.enter(types.chunkString, {\n      contentType: constants.contentTypeString\n    });\n    return title(code);\n  }\n  /** @type {State} */\n\n\n  function title(code) {\n    if (code === marker || code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString);\n      return atTitleBreak(code);\n    }\n\n    effects.consume(code);\n    return code === codes.backslash ? titleEscape : title;\n  }\n  /** @type {State} */\n\n\n  function titleEscape(code) {\n    if (code === marker || code === codes.backslash) {\n      effects.consume(code);\n      return title;\n    }\n\n    return title(code);\n  }\n}","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/micromark-factory-title/dev/index.js"],"names":["ok","assert","factorySpace","markdownLineEnding","codes","constants","types","factoryTitle","effects","nok","type","markerType","stringType","marker","start","code","quotationMark","apostrophe","leftParenthesis","enter","consume","exit","rightParenthesis","atFirstTitleBreak","atTitleBreak","eof","lineEnding","linePrefix","chunkString","contentType","contentTypeString","title","backslash","titleEscape"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(\n      code === codes.quotationMark ||\n        code === codes.apostrophe ||\n        code === codes.leftParenthesis,\n      'expected `\"`, `\\'`, or `(`'\n    )\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === codes.leftParenthesis ? codes.rightParenthesis : code\n    return atFirstTitleBreak\n  }\n\n  /** @type {State} */\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n\n  /** @type {State} */\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return factorySpace(effects, atTitleBreak, types.linePrefix)\n    }\n\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return title(code)\n  }\n\n  /** @type {State} */\n  function title(code) {\n    if (code === marker || code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString)\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash ? titleEscape : title\n  }\n\n  /** @type {State} */\n  function titleEscape(code) {\n    if (code === marker || code === codes.backslash) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}