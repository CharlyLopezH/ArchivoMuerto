{"ast":null,"code":"var _jsxFileName = \"C:\\\\reactjs\\\\Udemy\\\\NetCore\\\\react-peliculas\\\\src\\\\peliculas\\\\EditarPelicula.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Cargando from \"../utils/Cargando\";\nimport { urlPeliculas } from \"../utils/endpoints\";\nimport { convertirPeliculaAFormData } from \"../utils/FormDataUtils\";\nimport MostrarErrores from \"../utils/MostrarErrores\";\nimport FormularioPeliculas from \"./FormularioPeliculas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function EditarPelicula() {\n  _s();\n\n  const [pelicula, setPelicula] = useState();\n  const [peliculaPutGet, setPeliculaPutGet] = useState();\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  const [errores, setErrores] = useState([]);\n  useEffect(() => {\n    axios.get(`${urlPeliculas}/PutGet/${id}`).then(respuesta => {\n      const modelo = {\n        titulo: respuesta.data.pelicula.titulo,\n        enCines: respuesta.data.pelicula.enCines,\n        trailer: respuesta.data.pelicula.trailer,\n        posterURL: respuesta.data.pelicula.poster,\n        resumen: respuesta.data.pelicula.resumen,\n        fechaLanzamiento: new Date(respuesta.data.pelicula.fechaLanzamiento)\n      };\n      setPelicula(modelo);\n      setPeliculaPutGet(respuesta.data);\n    });\n  }, [id]);\n\n  async function editar(peliculaEditar) {\n    try {\n      const formData = convertirPeliculaAFormData(peliculaEditar);\n      await axios({\n        method: 'put',\n        url: `${urlPeliculas}/${id}`,\n        data: formData,\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      history.push(`/pelicula/${id}`);\n    } catch (error) {\n      setErrores(error.response.data);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Editar Pel\\xEDcula\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MostrarErrores, {\n      errores: errores\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), pelicula && peliculaPutGet ? /*#__PURE__*/_jsxDEV(FormularioPeliculas, {\n      actoresSeleccionados: peliculaPutGet.actores,\n      cinesSeleccionados: peliculaPutGet.cinesSeleccionados,\n      cinesNoSeleccionados: peliculaPutGet.cinesNoSeleccionados,\n      generosNoSeleccionados: peliculaPutGet.generosNoSeleccionados,\n      generosSeleccionados: peliculaPutGet.generosSeleccionados,\n      modelo: pelicula,\n      onSubmit: async valores => await editar(valores)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 43\n    }, this) : /*#__PURE__*/_jsxDEV(Cargando, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true);\n}\n\n_s(EditarPelicula, \"VMhUIdi6HBfkJOOpvDDplHyLOrk=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = EditarPelicula;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditarPelicula\");","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/src/peliculas/EditarPelicula.tsx"],"names":["axios","useEffect","useState","useHistory","useParams","Cargando","urlPeliculas","convertirPeliculaAFormData","MostrarErrores","FormularioPeliculas","EditarPelicula","pelicula","setPelicula","peliculaPutGet","setPeliculaPutGet","id","history","errores","setErrores","get","then","respuesta","modelo","titulo","data","enCines","trailer","posterURL","poster","resumen","fechaLanzamiento","Date","editar","peliculaEditar","formData","method","url","headers","push","error","response","actores","cinesSeleccionados","cinesNoSeleccionados","generosNoSeleccionados","generosSeleccionados","valores"],"mappings":"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","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport Cargando from \"../utils/Cargando\";\r\nimport { urlPeliculas } from \"../utils/endpoints\";\r\nimport { convertirPeliculaAFormData } from \"../utils/FormDataUtils\";\r\nimport MostrarErrores from \"../utils/MostrarErrores\";\r\nimport FormularioPeliculas from \"./FormularioPeliculas\";\r\nimport { peliculaCreacionDTO, peliculasPutGetDTO } from \"./peliculas.model\";\r\n\r\nexport default function EditarPelicula() {\r\n\r\n    const [pelicula, setPelicula] = useState<peliculaCreacionDTO>();\r\n    const [peliculaPutGet, setPeliculaPutGet] = useState<peliculasPutGetDTO>();\r\n    const { id }: any = useParams();\r\n    const history = useHistory();\r\n    const [errores, setErrores] = useState<string[]>([]);\r\n\r\n    useEffect(() => {\r\n        axios.get(`${urlPeliculas}/PutGet/${id}`)\r\n            .then((respuesta: AxiosResponse<peliculasPutGetDTO>) => {\r\n                const modelo: peliculaCreacionDTO = {\r\n                    titulo: respuesta.data.pelicula.titulo,\r\n                    enCines: respuesta.data.pelicula.enCines,\r\n                    trailer: respuesta.data.pelicula.trailer,\r\n                    posterURL: respuesta.data.pelicula.poster,\r\n                    resumen: respuesta.data.pelicula.resumen,\r\n                    fechaLanzamiento: new Date(respuesta.data.pelicula.fechaLanzamiento)\r\n                };\r\n                setPelicula(modelo);\r\n                setPeliculaPutGet(respuesta.data);\r\n            })\r\n    }, [id])\r\n\r\n    async function editar(peliculaEditar: peliculaCreacionDTO) {\r\n        try{\r\n            const formData = convertirPeliculaAFormData(peliculaEditar);\r\n            await axios({\r\n                method: 'put',\r\n                url: `${urlPeliculas}/${id}`,\r\n                data: formData,\r\n                headers: {'Content-Type': 'multipart/form-data'}\r\n            });\r\n            history.push(`/pelicula/${id}`);\r\n        }\r\n        catch(error){\r\n            setErrores(error.response.data);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <h3>Editar Pel√≠cula</h3>\r\n            <MostrarErrores errores={errores} />\r\n            {pelicula && peliculaPutGet ? <FormularioPeliculas\r\n                actoresSeleccionados={peliculaPutGet.actores}\r\n                cinesSeleccionados={peliculaPutGet.cinesSeleccionados}\r\n                cinesNoSeleccionados={peliculaPutGet.cinesNoSeleccionados}\r\n                generosNoSeleccionados={peliculaPutGet.generosNoSeleccionados}\r\n                generosSeleccionados={peliculaPutGet.generosSeleccionados}\r\n                modelo={pelicula}\r\n                onSubmit={async valores => await editar(valores)}\r\n            /> : <Cargando />}\r\n\r\n\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}