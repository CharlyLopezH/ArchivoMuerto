{"ast":null,"code":"import kleur from 'kleur';\nimport * as diff from 'diff';\nconst colors = {\n  '--': kleur.red,\n  '··': kleur.grey,\n  '++': kleur.green\n};\nconst TITLE = kleur.dim().italic;\nconst TAB = kleur.dim('→'),\n      SPACE = kleur.dim('·'),\n      NL = kleur.dim('↵');\n\nconst LOG = (sym, str) => colors[sym](sym + PRETTY(str)) + '\\n';\n\nconst LINE = (num, x) => kleur.dim('L' + String(num).padStart(x, '0') + ' ');\n\nconst PRETTY = str => str.replace(/[ ]/g, SPACE).replace(/\\t/g, TAB).replace(/(\\r?\\n)/g, NL);\n\nfunction line(obj, prev, pad) {\n  let char = obj.removed ? '--' : obj.added ? '++' : '··';\n  let arr = obj.value.replace(/\\r?\\n$/, '').split('\\n');\n  let i = 0,\n      tmp,\n      out = '';\n  if (obj.added) out += colors[char]().underline(TITLE('Expected:')) + '\\n';else if (obj.removed) out += colors[char]().underline(TITLE('Actual:')) + '\\n';\n\n  for (; i < arr.length; i++) {\n    tmp = arr[i];\n\n    if (tmp != null) {\n      if (prev) out += LINE(prev + i, pad);\n      out += LOG(char, tmp || '\\n');\n    }\n  }\n\n  return out;\n} // TODO: want better diffing\n//~> complex items bail outright\n\n\nexport function arrays(input, expect) {\n  let arr = diff.diffArrays(input, expect);\n  let i = 0,\n      j = 0,\n      k = 0,\n      tmp,\n      val,\n      char,\n      isObj,\n      str;\n  let out = LOG('··', '[');\n\n  for (; i < arr.length; i++) {\n    char = (tmp = arr[i]).removed ? '--' : tmp.added ? '++' : '··';\n\n    if (tmp.added) {\n      out += colors[char]().underline(TITLE('Expected:')) + '\\n';\n    } else if (tmp.removed) {\n      out += colors[char]().underline(TITLE('Actual:')) + '\\n';\n    }\n\n    for (j = 0; j < tmp.value.length; j++) {\n      isObj = tmp.value[j] && typeof tmp.value[j] === 'object';\n      val = stringify(tmp.value[j]).split(/\\r?\\n/g);\n\n      for (k = 0; k < val.length;) {\n        str = '  ' + val[k++] + (isObj ? '' : ',');\n        if (isObj && k === val.length && j + 1 < tmp.value.length) str += ',';\n        out += LOG(char, str);\n      }\n    }\n  }\n\n  return out + LOG('··', ']');\n}\nexport function lines(input, expect) {\n  let linenum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let i = 0,\n      tmp,\n      output = '';\n  let arr = diff.diffLines(input, expect);\n  let pad = String(expect.split(/\\r?\\n/g).length - linenum).length;\n\n  for (; i < arr.length; i++) {\n    output += line(tmp = arr[i], linenum, pad);\n    if (linenum && !tmp.removed) linenum += tmp.count;\n  }\n\n  return output;\n}\nexport function chars(input, expect) {\n  let arr = diff.diffChars(input, expect);\n  let i = 0,\n      output = '',\n      tmp;\n  let l1 = input.length;\n  let l2 = expect.length;\n  let p1 = PRETTY(input);\n  let p2 = PRETTY(expect);\n  tmp = arr[i];\n\n  if (l1 === l2) {// no length offsets\n  } else if (tmp.removed && arr[i + 1]) {\n    let del = tmp.count - arr[i + 1].count;\n\n    if (del == 0) {// wash~\n    } else if (del > 0) {\n      expect = ' '.repeat(del) + expect;\n      p2 = ' '.repeat(del) + p2;\n      l2 += del;\n    } else if (del < 0) {\n      input = ' '.repeat(-del) + input;\n      p1 = ' '.repeat(-del) + p1;\n      l1 += -del;\n    }\n  }\n\n  output += direct(p1, p2, l1, l2);\n\n  if (l1 === l2) {\n    for (tmp = '  '; i < l1; i++) {\n      tmp += input[i] === expect[i] ? ' ' : '^';\n    }\n  } else {\n    for (tmp = '  '; i < arr.length; i++) {\n      tmp += (arr[i].added || arr[i].removed ? '^' : ' ').repeat(Math.max(arr[i].count, 0));\n\n      if (i + 1 < arr.length && (arr[i].added && arr[i + 1].removed || arr[i].removed && arr[i + 1].added)) {\n        arr[i + 1].count -= arr[i].count;\n      }\n    }\n  }\n\n  return output + kleur.red(tmp);\n}\nexport function direct(input, expect) {\n  let lenA = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : String(input).length;\n  let lenB = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : String(expect).length;\n  let gutter = 4;\n  let lenC = Math.max(lenA, lenB);\n  let typeA = typeof input,\n      typeB = typeof expect;\n\n  if (typeA !== typeB) {\n    gutter = 2;\n    let delA = gutter + lenC - lenA;\n    let delB = gutter + lenC - lenB;\n    input += ' '.repeat(delA) + kleur.dim(`[${typeA}]`);\n    expect += ' '.repeat(delB) + kleur.dim(`[${typeB}]`);\n    lenA += delA + typeA.length + 2;\n    lenB += delB + typeB.length + 2;\n    lenC = Math.max(lenA, lenB);\n  }\n\n  let output = colors['++']('++' + expect + ' '.repeat(gutter + lenC - lenB) + TITLE('(Expected)')) + '\\n';\n  return output + colors['--']('--' + input + ' '.repeat(gutter + lenC - lenA) + TITLE('(Actual)')) + '\\n';\n}\nexport function sort(input, expect) {\n  var k,\n      i = 0,\n      tmp,\n      isArr = Array.isArray(input);\n  var keys = [],\n      out = isArr ? Array(input.length) : {};\n\n  if (isArr) {\n    for (i = 0; i < out.length; i++) {\n      tmp = input[i];\n      if (!tmp || typeof tmp !== 'object') out[i] = tmp;else out[i] = sort(tmp, expect[i]); // might not be right\n    }\n  } else {\n    for (k in expect) keys.push(k);\n\n    for (; i < keys.length; i++) {\n      if (Object.prototype.hasOwnProperty.call(input, k = keys[i])) {\n        if (!(tmp = input[k]) || typeof tmp !== 'object') out[k] = tmp;else out[k] = sort(tmp, expect[k]);\n      }\n    }\n\n    for (k in input) {\n      if (!out.hasOwnProperty(k)) {\n        out[k] = input[k]; // expect didnt have\n      }\n    }\n  }\n\n  return out;\n}\nexport function circular() {\n  var cache = new Set();\n  return function print(key, val) {\n    if (val === void 0) return '[__VOID__]';\n    if (typeof val === 'number' && val !== val) return '[__NAN__]';\n    if (!val || typeof val !== 'object') return val;\n    if (cache.has(val)) return '[Circular]';\n    cache.add(val);\n    return val;\n  };\n}\nexport function stringify(input) {\n  return JSON.stringify(input, circular(), 2).replace(/\"\\[__NAN__\\]\"/g, 'NaN').replace(/\"\\[__VOID__\\]\"/g, 'undefined');\n}\nexport function compare(input, expect) {\n  if (Array.isArray(expect)) return arrays(input, expect);\n  if (expect instanceof RegExp) return chars('' + input, '' + expect);\n  let isA = input && typeof input == 'object';\n  let isB = expect && typeof expect == 'object';\n  if (isA && isB) input = sort(input, expect);\n  if (isB) expect = stringify(expect);\n  if (isA) input = stringify(input);\n\n  if (expect && typeof expect == 'object') {\n    input = stringify(sort(input, expect));\n    expect = stringify(expect);\n  }\n\n  isA = typeof input == 'string';\n  isB = typeof expect == 'string';\n  if (isA && /\\r?\\n/.test(input)) return lines(input, '' + expect);\n  if (isB && /\\r?\\n/.test(expect)) return lines('' + input, expect);\n  if (isA && isB) return chars(input, expect);\n  return direct(input, expect);\n}","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/uvu/diff/index.mjs"],"names":["kleur","diff","colors","red","grey","green","TITLE","dim","italic","TAB","SPACE","NL","LOG","sym","str","PRETTY","LINE","num","x","String","padStart","replace","line","obj","prev","pad","char","removed","added","arr","value","split","i","tmp","out","underline","length","arrays","input","expect","diffArrays","j","k","val","isObj","stringify","lines","linenum","output","diffLines","count","chars","diffChars","l1","l2","p1","p2","del","repeat","direct","Math","max","lenA","lenB","gutter","lenC","typeA","typeB","delA","delB","sort","isArr","Array","isArray","keys","push","Object","prototype","hasOwnProperty","call","circular","cache","Set","print","key","has","add","JSON","compare","RegExp","isA","isB","test"],"mappings":"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","sourcesContent":["import kleur from 'kleur';\nimport * as diff from 'diff';\n\nconst colors = {\n\t'--': kleur.red,\n\t'··': kleur.grey,\n\t'++': kleur.green,\n};\n\nconst TITLE = kleur.dim().italic;\nconst TAB=kleur.dim('→'), SPACE=kleur.dim('·'), NL=kleur.dim('↵');\nconst LOG = (sym, str) => colors[sym](sym + PRETTY(str)) + '\\n';\nconst LINE = (num, x) => kleur.dim('L' + String(num).padStart(x, '0') + ' ');\nconst PRETTY = str => str.replace(/[ ]/g, SPACE).replace(/\\t/g, TAB).replace(/(\\r?\\n)/g, NL);\n\nfunction line(obj, prev, pad) {\n\tlet char = obj.removed ? '--' : obj.added ? '++' : '··';\n\tlet arr = obj.value.replace(/\\r?\\n$/, '').split('\\n');\n\tlet i=0, tmp, out='';\n\n\tif (obj.added) out += colors[char]().underline(TITLE('Expected:')) + '\\n';\n\telse if (obj.removed) out += colors[char]().underline(TITLE('Actual:')) + '\\n';\n\n\tfor (; i < arr.length; i++) {\n\t\ttmp = arr[i];\n\t\tif (tmp != null) {\n\t\t\tif (prev) out += LINE(prev + i, pad);\n\t\t\tout += LOG(char, tmp || '\\n');\n\t\t}\n\t}\n\n\treturn out;\n}\n\n// TODO: want better diffing\n//~> complex items bail outright\nexport function arrays(input, expect) {\n\tlet arr = diff.diffArrays(input, expect);\n\tlet i=0, j=0, k=0, tmp, val, char, isObj, str;\n\tlet out = LOG('··', '[');\n\n\tfor (; i < arr.length; i++) {\n\t\tchar = (tmp = arr[i]).removed ? '--' : tmp.added ? '++' : '··';\n\n\t\tif (tmp.added) {\n\t\t\tout += colors[char]().underline(TITLE('Expected:')) + '\\n';\n\t\t} else if (tmp.removed) {\n\t\t\tout += colors[char]().underline(TITLE('Actual:')) + '\\n';\n\t\t}\n\n\t\tfor (j=0; j < tmp.value.length; j++) {\n\t\t\tisObj = (tmp.value[j] && typeof tmp.value[j] === 'object');\n\t\t\tval = stringify(tmp.value[j]).split(/\\r?\\n/g);\n\t\t\tfor (k=0; k < val.length;) {\n\t\t\t\tstr = '  ' + val[k++] + (isObj ? '' : ',');\n\t\t\t\tif (isObj && k === val.length && (j + 1) < tmp.value.length) str += ',';\n\t\t\t\tout += LOG(char, str);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn out + LOG('··', ']');\n}\n\nexport function lines(input, expect, linenum = 0) {\n\tlet i=0, tmp, output='';\n\tlet arr = diff.diffLines(input, expect);\n\tlet pad = String(expect.split(/\\r?\\n/g).length - linenum).length;\n\n\tfor (; i < arr.length; i++) {\n\t\toutput += line(tmp = arr[i], linenum, pad);\n\t\tif (linenum && !tmp.removed) linenum += tmp.count;\n\t}\n\n\treturn output;\n}\n\nexport function chars(input, expect) {\n\tlet arr = diff.diffChars(input, expect);\n\tlet i=0, output='', tmp;\n\n\tlet l1 = input.length;\n\tlet l2 = expect.length;\n\n\tlet p1 = PRETTY(input);\n\tlet p2 = PRETTY(expect);\n\n\ttmp = arr[i];\n\n\tif (l1 === l2) {\n\t\t// no length offsets\n\t} else if (tmp.removed && arr[i + 1]) {\n\t\tlet del = tmp.count - arr[i + 1].count;\n\t\tif (del == 0) {\n\t\t\t// wash~\n\t\t} else if (del > 0) {\n\t\t\texpect = ' '.repeat(del) + expect;\n\t\t\tp2 = ' '.repeat(del) + p2;\n\t\t\tl2 += del;\n\t\t} else if (del < 0) {\n\t\t\tinput = ' '.repeat(-del) + input;\n\t\t\tp1 = ' '.repeat(-del) + p1;\n\t\t\tl1 += -del;\n\t\t}\n\t}\n\n\toutput += direct(p1, p2, l1, l2);\n\n\tif (l1 === l2) {\n\t\tfor (tmp='  '; i < l1; i++) {\n\t\t\ttmp += input[i] === expect[i] ? ' ' : '^';\n\t\t}\n\t} else {\n\t\tfor (tmp='  '; i < arr.length; i++) {\n\t\t\ttmp += ((arr[i].added || arr[i].removed) ? '^' : ' ').repeat(Math.max(arr[i].count, 0));\n\t\t\tif (i + 1 < arr.length && ((arr[i].added && arr[i+1].removed) || (arr[i].removed && arr[i+1].added))) {\n\t\t\t\tarr[i + 1].count -= arr[i].count;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn output + kleur.red(tmp);\n}\n\nexport function direct(input, expect, lenA = String(input).length, lenB = String(expect).length) {\n\tlet gutter = 4;\n\tlet lenC = Math.max(lenA, lenB);\n\tlet typeA=typeof input, typeB=typeof expect;\n\n\tif (typeA !== typeB) {\n\t\tgutter = 2;\n\n\t\tlet delA = gutter + lenC - lenA;\n\t\tlet delB = gutter + lenC - lenB;\n\n\t\tinput += ' '.repeat(delA) + kleur.dim(`[${typeA}]`);\n\t\texpect += ' '.repeat(delB) + kleur.dim(`[${typeB}]`);\n\n\t\tlenA += delA + typeA.length + 2;\n\t\tlenB += delB + typeB.length + 2;\n\t\tlenC = Math.max(lenA, lenB);\n\t}\n\n\tlet output = colors['++']('++' + expect + ' '.repeat(gutter + lenC - lenB) + TITLE('(Expected)')) + '\\n';\n\treturn output + colors['--']('--' + input + ' '.repeat(gutter + lenC - lenA) + TITLE('(Actual)')) + '\\n';\n}\n\nexport function sort(input, expect) {\n\tvar k, i=0, tmp, isArr = Array.isArray(input);\n\tvar keys=[], out=isArr ? Array(input.length) : {};\n\n\tif (isArr) {\n\t\tfor (i=0; i < out.length; i++) {\n\t\t\ttmp = input[i];\n\t\t\tif (!tmp || typeof tmp !== 'object') out[i] = tmp;\n\t\t\telse out[i] = sort(tmp, expect[i]); // might not be right\n\t\t}\n\t} else {\n\t\tfor (k in expect)\n\t\t\tkeys.push(k);\n\n\t\tfor (; i < keys.length; i++) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(input, k = keys[i])) {\n\t\t\t\tif (!(tmp = input[k]) || typeof tmp !== 'object') out[k] = tmp;\n\t\t\t\telse out[k] = sort(tmp, expect[k]);\n\t\t\t}\n\t\t}\n\n\t\tfor (k in input) {\n\t\t\tif (!out.hasOwnProperty(k)) {\n\t\t\t\tout[k] = input[k]; // expect didnt have\n\t\t\t}\n\t\t}\n\t}\n\n\treturn out;\n}\n\nexport function circular() {\n\tvar cache = new Set;\n\treturn function print(key, val) {\n\t\tif (val === void 0) return '[__VOID__]';\n\t\tif (typeof val === 'number' && val !== val) return '[__NAN__]';\n\t\tif (!val || typeof val !== 'object') return val;\n\t\tif (cache.has(val)) return '[Circular]';\n\t\tcache.add(val); return val;\n\t}\n}\n\nexport function stringify(input) {\n\treturn JSON.stringify(input, circular(), 2).replace(/\"\\[__NAN__\\]\"/g, 'NaN').replace(/\"\\[__VOID__\\]\"/g, 'undefined');\n}\n\nexport function compare(input, expect) {\n\tif (Array.isArray(expect)) return arrays(input, expect);\n\tif (expect instanceof RegExp) return chars(''+input, ''+expect);\n\n\tlet isA = input && typeof input == 'object';\n\tlet isB = expect && typeof expect == 'object';\n\n\tif (isA && isB) input = sort(input, expect);\n\tif (isB) expect = stringify(expect);\n\tif (isA) input = stringify(input);\n\n\tif (expect && typeof expect == 'object') {\n\t\tinput = stringify(sort(input, expect));\n\t\texpect = stringify(expect);\n\t}\n\n\tisA = typeof input == 'string';\n\tisB = typeof expect == 'string';\n\n\tif (isA && /\\r?\\n/.test(input)) return lines(input, ''+expect);\n\tif (isB && /\\r?\\n/.test(expect)) return lines(''+input, expect);\n\tif (isA && isB) return chars(input, expect);\n\n\treturn direct(input, expect);\n}\n"]},"metadata":{},"sourceType":"module"}