{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {Construct} */\n\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n\n  let marker;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(code === codes.asterisk || code === codes.dash || code === codes.underscore, 'expected `*`, `-`, or `_`');\n    effects.enter(types.thematicBreak);\n    marker = code;\n    return atBreak(code);\n  }\n  /** @type {State} */\n\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(types.thematicBreakSequence);\n      return sequence(code);\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, types.whitespace)(code);\n    }\n\n    if (size < constants.thematicBreakMarkerCountMin || code !== codes.eof && !markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    effects.exit(types.thematicBreak);\n    return ok(code);\n  }\n  /** @type {State} */\n\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n\n    effects.exit(types.thematicBreakSequence);\n    return atBreak(code);\n  }\n}","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js"],"names":["ok","assert","factorySpace","markdownLineEnding","markdownSpace","codes","constants","types","thematicBreak","name","tokenize","tokenizeThematicBreak","effects","nok","size","marker","start","code","asterisk","dash","underscore","enter","atBreak","thematicBreakSequence","sequence","whitespace","thematicBreakMarkerCountMin","eof","exit","consume"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,EAA4BC,aAA5B,QAAgD,0BAAhD;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,SAAR,QAAwB,oCAAxB;AACA,SAAQC,KAAR,QAAoB,gCAApB;AAEA;;AACA,OAAO,MAAMC,aAAa,GAAG;AAC3BC,EAAAA,IAAI,EAAE,eADqB;AAE3BC,EAAAA,QAAQ,EAAEC;AAFiB,CAAtB;AAKP;;AACA,SAASA,qBAAT,CAA+BC,OAA/B,EAAwCZ,EAAxC,EAA4Ca,GAA5C,EAAiD;AAC/C,MAAIC,IAAI,GAAG,CAAX;AACA;;AACA,MAAIC,MAAJ;AAEA,SAAOC,KAAP;AAEA;;AACA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnBhB,IAAAA,MAAM,CACJgB,IAAI,KAAKZ,KAAK,CAACa,QAAf,IACED,IAAI,KAAKZ,KAAK,CAACc,IADjB,IAEEF,IAAI,KAAKZ,KAAK,CAACe,UAHb,EAIJ,2BAJI,CAAN;AAOAR,IAAAA,OAAO,CAACS,KAAR,CAAcd,KAAK,CAACC,aAApB;AACAO,IAAAA,MAAM,GAAGE,IAAT;AACA,WAAOK,OAAO,CAACL,IAAD,CAAd;AACD;AAED;;;AACA,WAASK,OAAT,CAAiBL,IAAjB,EAAuB;AACrB,QAAIA,IAAI,KAAKF,MAAb,EAAqB;AACnBH,MAAAA,OAAO,CAACS,KAAR,CAAcd,KAAK,CAACgB,qBAApB;AACA,aAAOC,QAAQ,CAACP,IAAD,CAAf;AACD;;AAED,QAAIb,aAAa,CAACa,IAAD,CAAjB,EAAyB;AACvB,aAAOf,YAAY,CAACU,OAAD,EAAUU,OAAV,EAAmBf,KAAK,CAACkB,UAAzB,CAAZ,CAAiDR,IAAjD,CAAP;AACD;;AAED,QACEH,IAAI,GAAGR,SAAS,CAACoB,2BAAjB,IACCT,IAAI,KAAKZ,KAAK,CAACsB,GAAf,IAAsB,CAACxB,kBAAkB,CAACc,IAAD,CAF5C,EAGE;AACA,aAAOJ,GAAG,CAACI,IAAD,CAAV;AACD;;AAEDL,IAAAA,OAAO,CAACgB,IAAR,CAAarB,KAAK,CAACC,aAAnB;AACA,WAAOR,EAAE,CAACiB,IAAD,CAAT;AACD;AAED;;;AACA,WAASO,QAAT,CAAkBP,IAAlB,EAAwB;AACtB,QAAIA,IAAI,KAAKF,MAAb,EAAqB;AACnBH,MAAAA,OAAO,CAACiB,OAAR,CAAgBZ,IAAhB;AACAH,MAAAA,IAAI;AACJ,aAAOU,QAAP;AACD;;AAEDZ,IAAAA,OAAO,CAACgB,IAAR,CAAarB,KAAK,CAACgB,qBAAnB;AACA,WAAOD,OAAO,CAACL,IAAD,CAAd;AACD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(\n      code === codes.asterisk ||\n        code === codes.dash ||\n        code === codes.underscore,\n      'expected `*`, `-`, or `_`'\n    )\n\n    effects.enter(types.thematicBreak)\n    marker = code\n    return atBreak(code)\n  }\n\n  /** @type {State} */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(types.thematicBreakSequence)\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, types.whitespace)(code)\n    }\n\n    if (\n      size < constants.thematicBreakMarkerCountMin ||\n      (code !== codes.eof && !markdownLineEnding(code))\n    ) {\n      return nok(code)\n    }\n\n    effects.exit(types.thematicBreak)\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit(types.thematicBreakSequence)\n    return atBreak(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}