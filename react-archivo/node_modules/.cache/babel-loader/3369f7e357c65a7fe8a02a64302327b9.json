{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {Construct} */\n\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n};\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, types.linePrefix);\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/micromark-core-commonmark/dev/lib/blank-line.js"],"names":["factorySpace","markdownLineEnding","codes","types","blankLine","tokenize","tokenizeBlankLine","partial","effects","ok","nok","afterWhitespace","linePrefix","code","eof"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAAQA,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,QAAiC,0BAAjC;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,KAAR,QAAoB,gCAApB;AAEA;;AACA,OAAO,MAAMC,SAAS,GAAG;AAACC,EAAAA,QAAQ,EAAEC,iBAAX;AAA8BC,EAAAA,OAAO,EAAE;AAAvC,CAAlB;AAEP;;AACA,SAASD,iBAAT,CAA2BE,OAA3B,EAAoCC,EAApC,EAAwCC,GAAxC,EAA6C;AAC3C,SAAOV,YAAY,CAACQ,OAAD,EAAUG,eAAV,EAA2BR,KAAK,CAACS,UAAjC,CAAnB;AAEA;;AACA,WAASD,eAAT,CAAyBE,IAAzB,EAA+B;AAC7B,WAAOA,IAAI,KAAKX,KAAK,CAACY,GAAf,IAAsBb,kBAAkB,CAACY,IAAD,CAAxC,GAAiDJ,EAAE,CAACI,IAAD,CAAnD,GAA4DH,GAAG,CAACG,IAAD,CAAtE;AACD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const blankLine = {tokenize: tokenizeBlankLine, partial: true}\n\n/** @type {Tokenizer} */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, types.linePrefix)\n\n  /** @type {State} */\n  function afterWhitespace(code) {\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}