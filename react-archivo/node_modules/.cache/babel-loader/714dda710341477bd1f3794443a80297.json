{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { types } from 'micromark-util-symbol/types.js';\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\n\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      seen = true;\n      return start;\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? types.linePrefix : types.lineSuffix)(code);\n    }\n\n    return ok(code);\n  }\n}","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/micromark-factory-whitespace/dev/index.js"],"names":["factorySpace","markdownLineEnding","markdownSpace","types","factoryWhitespace","effects","ok","seen","start","code","enter","lineEnding","consume","exit","linePrefix","lineSuffix"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAAQA,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,EAA4BC,aAA5B,QAAgD,0BAAhD;AACA,SAAQC,KAAR,QAAoB,gCAApB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,OAA3B,EAAoCC,EAApC,EAAwC;AAC7C;AACA,MAAIC,IAAJ;AAEA,SAAOC,KAAP;AAEA;;AACA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB,QAAIR,kBAAkB,CAACQ,IAAD,CAAtB,EAA8B;AAC5BJ,MAAAA,OAAO,CAACK,KAAR,CAAcP,KAAK,CAACQ,UAApB;AACAN,MAAAA,OAAO,CAACO,OAAR,CAAgBH,IAAhB;AACAJ,MAAAA,OAAO,CAACQ,IAAR,CAAaV,KAAK,CAACQ,UAAnB;AACAJ,MAAAA,IAAI,GAAG,IAAP;AACA,aAAOC,KAAP;AACD;;AAED,QAAIN,aAAa,CAACO,IAAD,CAAjB,EAAyB;AACvB,aAAOT,YAAY,CACjBK,OADiB,EAEjBG,KAFiB,EAGjBD,IAAI,GAAGJ,KAAK,CAACW,UAAT,GAAsBX,KAAK,CAACY,UAHf,CAAZ,CAILN,IAJK,CAAP;AAKD;;AAED,WAAOH,EAAE,CAACG,IAAD,CAAT;AACD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? types.linePrefix : types.lineSuffix\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}