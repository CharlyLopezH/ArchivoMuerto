{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport { ok as assert } from 'uvu/assert';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/** @type {Construct} */\n\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n};\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n\n  let index;\n  /** @type {number|undefined} */\n\n  let enter; // If we start and end with an EOL or a space.\n\n  if ((events[headEnterIndex][1].type === types.lineEnding || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === types.lineEnding || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex; // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === types.codeTextData) {\n        // Then we have padding.\n        events[headEnterIndex][1].type = types.codeTextPadding;\n        events[tailExitIndex][1].type = types.codeTextPadding;\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== types.lineEnding) {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === types.lineEnding) {\n      events[enter][1].type = types.codeTextData;\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n\n      enter = undefined;\n    }\n  }\n\n  return events;\n}\n/** @type {Previous} */\n\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== codes.graveAccent || this.events[this.events.length - 1][1].type === types.characterEscape;\n}\n/** @type {Tokenizer} */\n\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n\n  let size;\n  /** @type {Token} */\n\n  let token;\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(code === codes.graveAccent, 'expected `` ` ``');\n    assert(previous.call(self, self.previous), 'expected correct previous');\n    effects.enter(types.codeText);\n    effects.enter(types.codeTextSequence);\n    return openingSequence(code);\n  }\n  /** @type {State} */\n\n\n  function openingSequence(code) {\n    if (code === codes.graveAccent) {\n      effects.consume(code);\n      sizeOpen++;\n      return openingSequence;\n    }\n\n    effects.exit(types.codeTextSequence);\n    return gap(code);\n  }\n  /** @type {State} */\n\n\n  function gap(code) {\n    // EOF.\n    if (code === codes.eof) {\n      return nok(code);\n    } // Closing fence?\n    // Could also be data.\n\n\n    if (code === codes.graveAccent) {\n      token = effects.enter(types.codeTextSequence);\n      size = 0;\n      return closingSequence(code);\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n\n    if (code === codes.space) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return gap;\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return gap;\n    } // Data.\n\n\n    effects.enter(types.codeTextData);\n    return data(code);\n  } // In code.\n\n  /** @type {State} */\n\n\n  function data(code) {\n    if (code === codes.eof || code === codes.space || code === codes.graveAccent || markdownLineEnding(code)) {\n      effects.exit(types.codeTextData);\n      return gap(code);\n    }\n\n    effects.consume(code);\n    return data;\n  } // Closing fence.\n\n  /** @type {State} */\n\n\n  function closingSequence(code) {\n    // More.\n    if (code === codes.graveAccent) {\n      effects.consume(code);\n      size++;\n      return closingSequence;\n    } // Done!\n\n\n    if (size === sizeOpen) {\n      effects.exit(types.codeTextSequence);\n      effects.exit(types.codeText);\n      return ok(code);\n    } // More or less accents: mark as data.\n\n\n    token.type = types.codeTextData;\n    return data(code);\n  }\n}","map":{"version":3,"sources":["C:/reactjs/Udemy/NetCore/react-peliculas/node_modules/micromark-core-commonmark/dev/lib/code-text.js"],"names":["ok","assert","markdownLineEnding","codes","types","codeText","name","tokenize","tokenizeCodeText","resolve","resolveCodeText","previous","events","tailExitIndex","length","headEnterIndex","index","enter","type","lineEnding","codeTextData","codeTextPadding","undefined","end","splice","code","graveAccent","characterEscape","effects","nok","self","sizeOpen","size","token","start","call","codeTextSequence","openingSequence","consume","exit","gap","eof","closingSequence","space","data"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number|undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === types.lineEnding ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === types.lineEnding ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === types.codeTextData) {\n        // Then we have padding.\n        events[headEnterIndex][1].type = types.codeTextPadding\n        events[tailExitIndex][1].type = types.codeTextPadding\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (\n        index !== tailExitIndex &&\n        events[index][1].type !== types.lineEnding\n      ) {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === types.lineEnding\n    ) {\n      events[enter][1].type = types.codeTextData\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n\n/** @type {Previous} */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== codes.graveAccent ||\n    this.events[this.events.length - 1][1].type === types.characterEscape\n  )\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.graveAccent, 'expected `` ` ``')\n    assert(previous.call(self, self.previous), 'expected correct previous')\n    effects.enter(types.codeText)\n    effects.enter(types.codeTextSequence)\n    return openingSequence(code)\n  }\n\n  /** @type {State} */\n  function openingSequence(code) {\n    if (code === codes.graveAccent) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit(types.codeTextSequence)\n    return gap(code)\n  }\n\n  /** @type {State} */\n  function gap(code) {\n    // EOF.\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    // Closing fence?\n    // Could also be data.\n    if (code === codes.graveAccent) {\n      token = effects.enter(types.codeTextSequence)\n      size = 0\n      return closingSequence(code)\n    }\n\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === codes.space) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return gap\n    }\n\n    // Data.\n    effects.enter(types.codeTextData)\n    return data(code)\n  }\n\n  // In code.\n  /** @type {State} */\n  function data(code) {\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.graveAccent ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit(types.codeTextData)\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n\n  // Closing fence.\n  /** @type {State} */\n  function closingSequence(code) {\n    // More.\n    if (code === codes.graveAccent) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(types.codeTextSequence)\n      effects.exit(types.codeText)\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = types.codeTextData\n    return data(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}